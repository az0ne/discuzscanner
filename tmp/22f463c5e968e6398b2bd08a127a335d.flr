movie '/home/monster/Develop/scanner//tmp/22f463c5e968e6398b2bd08a127a335d.swf' {
// flash 7, total frames: 4, frame rate: 25 fps, 520x400 px, compressed

  movieClip 2 lens_mc {
  }

  movieClip 4 bullet_round {
  }

  movieClip 6 bullet_square {
  }

  movieClip 12 __Packages.com.amcharts.StageSize {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.StageSize) {
        var v1 = function (obj, funct) {
          this.__obj = obj;
          this.__funct = funct;
          this.__interval = setInterval(this.__getSize, 10, [this]);
        };

        com.amcharts.StageSize = v1;
        var v2 = v1.prototype;
        v2.__getSize = function (params) {
          if (Stage.width != undefined && Stage.height != undefined && Stage.width != 0 && Stage.height != 0) {
            clearInterval(params[0].__interval);
            params[0].__obj[params[0].__funct](Stage.width, Stage.height);
          }
        };

        ASSetPropFlags(com.amcharts.StageSize.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 13 __Packages.com.amcharts.Utils {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Utils) {
        var v1 = function () {};

        com.amcharts.Utils = v1;
        var v2 = v1.prototype;
        v1.parseTrue = function (value) {
          var v1 = false;
          if (value == true) {
            v1 = true;
          }
          if (com.amcharts.Utils.stripSymbols(value.toLowerCase(), ' ') == 'true') {
            v1 = true;
          }
          if (com.amcharts.Utils.stripSymbols(value.toLowerCase(), ' ') == 'yes') {
            v1 = true;
          }
          if (value > 0) {
            v1 = true;
          }
          if (value == '' || value == undefined) {
          }
          return v1;
        };

        v1.changeBoolean = function (value) {
          if (value == true) {
            return false;
          }
          if (value == false) {
            return true;
          }
        };

        v1.replace = function (string, find, replace) {
          return (string.split(find)).join(replace);
        };

        v1.stripSymbols = function (string, symbol) {
          var v1 = string.split(symbol);
          return v1.join('');
        };

        v1.formatNumber = function (num, decimalsSeparator, thousandsSeparator) {
          if (decimalsSeparator == undefined) {
            decimalsSeparator = _global.amchartsConfig.decimalsSeparator;
          }
          if (decimalsSeparator == undefined) {
            decimalsSeparator = ',';
          }
          if (thousandsSeparator == undefined) {
            thousandsSeparator = _global.amchartsConfig.thousandsSeparator;
          }
          if (thousandsSeparator == undefined) {
            thousandsSeparator = ' ';
          }
          if (num < 0) {
            var v9 = '-';
          } else {
            var v9 = '';
          }
          num = Math.abs(num);
          var v10 = num.toString();
          var v6 = v10.split('.');
          var v3 = '';
          var v4 = v6[0].toString();
          var v2 = v4.length;
          while (v2 >= 0) {
            if (v2 != v4.length) {
              if (v2 != 0) {
                v3 = v4.substring(v2 - 3, v2) + thousandsSeparator + v3;
              } else {
                v3 = v4.substring(v2 - 3, v2) + v3;
              }
            } else {
              v3 = v4.substring(v2 - 3, v2);
            }
            v2 -= 3;
          }
          if (v6[1] != undefined) {
            v3 = v3 + decimalsSeparator + v6[1];
          }
          v3 = v9 + v3;
          return v3;
        };

        v1.tweekAddress = function (address, path) {
          if (address.substr(0, 7) != 'http://' || address.substr(0, 8) != 'https://') {
            address = path + address;
          }
          return address;
        };

        ASSetPropFlags(com.amcharts.Utils.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 14 __Packages.com.amcharts.Load {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Load) {
        var v1 = function () {};

        com.amcharts.Load = v1;
        var v2 = v1.prototype;
        v2.loadVars = function (fileName, obj, funct, timeStamp, errorFunct) {
          var main_obj = this;
          this.__loader = new LoadVars();
          this.__loader.onData = function (variable) {
            main_obj.__preloader.remove();
            if (variable == undefined) {
              main_obj.__error();
              obj[errorFunct](fileName);
            } else {
              obj[funct](variable);
            }
          };

          this.__loader.load(fileName + this.__timeStamp(timeStamp));
        };

        v2.loadXML = function (fileName, obj, funct, timeStamp, errorFunct) {
          var main_obj = this;
          this.__loader = new XML();
          this.__loader.ignoreWhite = true;
          this.__loader.onLoad = function (success) {
            main_obj.__preloader.remove();
            if (success == false) {
              main_obj.__error();
              obj[errorFunct](fileName);
            } else {
              obj[funct](main_obj.__loader);
            }
          };

          this.__loader.load(fileName + this.__timeStamp(timeStamp));
        };

        v2.loadClip = function (fileName, target_mc, obj, funct, timeStamp, errorFunct, param) {
          var main_obj = this;
          this.__loader = target_mc;
          var v3 = new MovieClipLoader();
          var v2 = new Object();
          v2.onLoadError = function (target_mc, errorCode, httpStatus) {
            obj[errorFunct]();
            main_obj.__error(fileName);
          };

          v2.onLoadInit = function () {
            main_obj.__preloader.remove();
            obj[funct](target_mc, param);
          };

          v3.addListener(v2);
          v3.loadClip(fileName + this.__timeStamp(timeStamp), this.__loader);
        };

        v2.preloader = function (target_mc, name, depth, x, y, width, height, color, bgColor, text) {
          this.__preloader = new com.amcharts.Preloader(target_mc, name, depth, this.__loader, width, height, color, bgColor, text);
          (this.__preloader.__get__mc())._x = x;
          (this.__preloader.__get__mc())._y = y;
        };

        v2.__timeStamp = function (param) {
          if (param == true && (_url.substr(0, 4)).toLowerCase() == 'http') {
            return '?' + getTimer() + '' + random(Number.MAX_VALUE) + '' + random(Number.MAX_VALUE);
          } else {
            return '';
          }
        };

        v2.__error = function () {
          this.__preloader.remove();
        };

        ASSetPropFlags(com.amcharts.Load.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 15 __Packages.com.amcharts.Preloader {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Preloader) {
        var v1 = function (target_mc, name, depth, loader, width, height, color, bgColor, text, obj, funct) {
          this.__loader = loader;
          this.__text = text;
          this.__width = width;
          this.__height = height;
          if (color != undefined) {
            this.__color = color;
          }
          this.__bgColor = bgColor;
          if (this.__text == undefined) {
            this.__text = '';
            this.__separator = '';
          }
          this.__obj = obj;
          this.__funct = funct;
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__init();
        };

        com.amcharts.Preloader = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          var v2 = new com.amcharts.Rectangle(this.__mc, 'bg_mc', 0, this.__width, this.__height, this.__bgColor);
          if (this.__bgColor == undefined || this.__bgColor == null) {
            v2.mc._alpha = 0;
          }
          v2.mc.onRollOver = function () {
            this.useHandCursor = false;
          };

          this.__barWidth = this.__width / 2;
          this.__barX = (this.__width - this.__barWidth) / 2;
          this.__barY = (this.__height - this.__barHeight) / 2;
          var v3 = new com.amcharts.Rectangle(this.__mc, 'outline_mc', 1, this.__barWidth, this.__barHeight, null, 1, this.__color);
          v3.mc._x = this.__barX;
          v3.mc._y = this.__barY;
          this.__bar = new com.amcharts.Rectangle(this.__mc, 'bar_mc', 2, this.__barWidth, this.__barHeight - 1, this.__color);
          (this.__bar.__get__mc())._x = this.__barX;
          (this.__bar.__get__mc())._y = this.__barY;
          (this.__bar.__get__mc())._width = 0;
          if (this.__text != '' || this.__showInfo == true) {
            this.__label = new com.amcharts.Text(this.__mc, 'label', 3, this.__barX, this.__barX, this.__barWidth);
            this.__label.__set__txt(this.__text);
            this.__label.__set__color(this.__color);
            this.__label.x -= 2;
            this.__label.__set__y(this.__barY - this.__label.__get__textHeight() - 3);
          }
          this.__interval = setInterval(this, 'updateBar', 50);
        };

        v2.updateBar = function () {
          var v2 = Math.round((this.__loader.getBytesLoaded() / this.__loader.getBytesTotal()) * 100);
          if (isNaN(v2)) {
            v2 = 0;
          } else {
            if (this.__showInfo == true) {
              this.__label.__set__txt(this.__text + this.__separator + v2 + '% / ' + Math.round(this.__loader.getBytesTotal() / 1024) + ' kb');
              this.__label.__set__y(this.__barY - this.__label.__get__textHeight() - 3);
            }
          }
          (this.__bar.__get__mc())._width = this.__barWidth * v2 / 100;
        };

        v2.__set__showInfo = function (param) {
          this.__showInfo = param;
          null;
          null;
          return this.__get__showInfo();
        };

        v2.remove = function () {
          clearInterval(this.__interval);
          if (this.__mc != undefined) {
            removeMovieClip(this.__mc);
          }
          if (this.__obj && this.__funct) {
            this.__obj[this.__funct]();
          }
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.__barHeight = 5;
        v2.__color = 0;
        v2.__showInfo = true;
        v2.__separator = ': ';
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('showInfo', function () {}, v2.__set__showInfo);
        ASSetPropFlags(com.amcharts.Preloader.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 16 __Packages.com.amcharts.Rectangle {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Rectangle) {
        var v1 = function (target_mc, name, depth, width, height, bgColor, borderWidth, borderColor, cornerRadius, bgAlpha, borderAlpha) {
          this.__target_mc = target_mc;
          this.__name = name;
          this.__depth = depth;
          this.__width = width;
          this.__height = height;
          this.__bgColor = bgColor;
          this.__borderWidth = borderWidth;
          this.__borderColor = borderColor;
          this.__cornerRadius = (cornerRadius !== undefined) ? cornerRadius : this.__cornerRadius;
          this.__bgAlpha = (bgAlpha !== undefined) ? bgAlpha : this.__bgAlpha;
          this.__borderAlpha = (borderAlpha !== undefined) ? borderAlpha : this.__borderAlpha;
          this.__show();
        };

        com.amcharts.Rectangle = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.__show = function () {
          var v6 = this.__width;
          var v5 = this.__height;
          var v3 = 0;
          var v2 = 0;
          var v4 = this.__cornerRadius;
          if (this.__borderWidth > 1) {
            var v7 = Math.ceil(this.__borderWidth / 2);
            v3 += v7;
            v2 += v7;
            v6 -= this.__borderWidth;
            v5 -= this.__borderWidth;
          }
          if (this.__borderWidth == 1) {
            v6 -= 1;
            v5 -= 1;
          }
          this.__mc = this.__target_mc.createEmptyMovieClip(this.__name, this.__depth);
          if (this.__borderWidth == undefined || this.__borderWidth == null) {
            this.__mc.lineStyle(0, this.__bgColor, this.__borderAlpha);
          } else {
            this.__mc.lineStyle(this.__borderWidth, this.__borderColor, this.__borderAlpha);
          }
          if (this.__bgColor != undefined || this.__bgColor != null) {
            this.__mc.beginFill(this.__bgColor, this.__bgAlpha);
          }
          this.__mc.moveTo(v3 + v4, v2);
          this.__mc.lineTo(v6 + v3 - v4, v2);
          if (v4 > 0) {
            this.__mc.curveTo(v6 + v3, v2, v6 + v3, v2 + v4);
          }
          this.__mc.lineTo(v6 + v3, v5 + v2 - v4);
          if (v4 > 0) {
            this.__mc.curveTo(v6 + v3, v5 + v2, v6 + v3 - v4, v5 + v2);
          }
          this.__mc.lineTo(v3 + v4, v5 + v2);
          if (v4 > 0) {
            this.__mc.curveTo(v3, v5 + v2, v3, v5 + v2 - v4);
          }
          this.__mc.lineTo(v3, v2 + v4);
          if (v4 > 0) {
            this.__mc.curveTo(v3, v2, v3 + v4, v2);
          }
          if (this.__bgColor != undefined || this.__bgColor != null) {
            this.__mc.endFill();
          }
        };

        v2.__cornerRadius = 0;
        v2.__bgAlpha = 100;
        v2.__borderAlpha = 100;
        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.Rectangle.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 17 __Packages.com.amcharts.Text {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Text) {
        var v1 = function (target_mc, name, depth, x, y, width, height, autosize) {
          this.__font = _global.amchartsConfig.font || this.__font;
          this.__size = _global.amchartsConfig.textSize || this.__size;
          this.__color = _global.amchartsConfig.textColor || this.__color;
          this.__embedFonts = _global.amchartsConfig.embedFonts || this.__embedFonts;
          target_mc.createTextField(name, depth, x, y, width, height);
          this.__text = target_mc[name];
          if ((height == undefined || width == undefined || height == 0 || width == 0) && autosize == undefined) {
            autosize = 'left';
          }
          if (width == 0 || width == undefined || isNaN(width) == true) {
            this.__wrap = false;
          }
          this.__text.multiline = true;
          this.__text.autoSize = autosize;
          this.__text.selectable = this.__selectable;
          this.__text.wordWrap = this.__wrap;
          this.__text.border = false;
          this.__text.embedFonts = this.__embedFonts;
          this.__format = new TextFormat();
          this.__format.font = this.__font;
          this.__format.size = this.__size;
          this.__format.color = this.__color;
        };

        com.amcharts.Text = v1;
        var v2 = v1.prototype;
        v2.__set__txt = function (param) {
          this.__text.text = param;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__txt();
        };

        v2.__set__htmlTxt = function (param) {
          this.__text.html = true;
          this.__text.htmlText = param;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__htmlTxt();
        };

        v2.__set__size = function (param) {
          this.__format.size = param || this.__size;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__size();
        };

        v2.__set__bold = function (param) {
          this.__format.bold = param;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__bold();
        };

        v2.__set__underline = function (param) {
          this.__format.underline = param;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__underline();
        };

        v2.__set__color = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__format.color = param;
          } else {
            this.__format.color = this.__color;
          }
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__color();
        };

        v2.__set__font = function (param) {
          if (param != undefined) {
            this.__format.font = param;
            this.__text.setTextFormat(this.__format);
          }
          null;
          null;
          return this.__get__font();
        };

        v2.__set__x = function (param) {
          this.__text._x = param;
          null;
          null;
          return this.__get__x();
        };

        v2.__set__y = function (param) {
          this.__text._y = param;
          null;
          null;
          return this.__get__y();
        };

        v2.__set__textHeight = function (param) {
          this.__text.textHeight = param;
          null;
          null;
          return this.__get__textHeight();
        };

        v2.__set__wrap = function (param) {
          this.__text.wordWrap = param;
          null;
          null;
          return this.__get__wrap();
        };

        v2.__set__multiline = function (param) {
          this.__text.multiline = param;
          null;
          null;
          return this.__get__multiline();
        };

        v2.__set__align = function (param) {
          this.__format.align = param;
          this.__text.setTextFormat(this.__format);
          null;
          null;
          return this.__get__align();
        };

        v2.__set__textWidth = function (param) {
          this.__text.textWidth = param;
          null;
          null;
          return this.__get__textWidth();
        };

        v2.__set__width = function (param) {
          this.__text._width = param;
          null;
          null;
          return this.__get__width();
        };

        v2.__set__selectable = function (param) {
          this.__text.selectable = param;
          null;
          null;
          return this.__get__selectable();
        };

        v2.__get__x = function () {
          return this.__text._x;
        };

        v2.__get__y = function () {
          return this.__text._y;
        };

        v2.__get__textHeight = function () {
          return this.__text.textHeight;
        };

        v2.__get__width = function () {
          return this.__text._width;
        };

        v2.__get__height = function () {
          return this.__text._height;
        };

        v2.__get__textWidth = function () {
          return this.__text.textWidth;
        };

        v2.__font = 'Arial';
        v2.__size = 11;
        v2.__color = 0;
        v2.__selectable = false;
        v2.__wrap = true;
        v2.__embedFonts = false;
        v2.addProperty('align', function () {}, v2.__set__align);
        v2.addProperty('bold', function () {}, v2.__set__bold);
        v2.addProperty('color', function () {}, v2.__set__color);
        v2.addProperty('font', function () {}, v2.__set__font);
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('htmlTxt', function () {}, v2.__set__htmlTxt);
        v2.addProperty('multiline', function () {}, v2.__set__multiline);
        v2.addProperty('selectable', function () {}, v2.__set__selectable);
        v2.addProperty('size', function () {}, v2.__set__size);
        v2.addProperty('textHeight', v2.__get__textHeight, v2.__set__textHeight);
        v2.addProperty('textWidth', v2.__get__textWidth, v2.__set__textWidth);
        v2.addProperty('txt', function () {}, v2.__set__txt);
        v2.addProperty('underline', function () {}, v2.__set__underline);
        v2.addProperty('width', v2.__get__width, v2.__set__width);
        v2.addProperty('wrap', function () {}, v2.__set__wrap);
        v2.addProperty('x', v2.__get__x, v2.__set__x);
        v2.addProperty('y', v2.__get__y, v2.__set__y);
        ASSetPropFlags(com.amcharts.Text.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 18 __Packages.com.amcharts.PopUp {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.PopUp) {
        var v1 = function (target_mc, name, depth, message, x, y, width, bgColor, textColor) {
          this.__bgColor = bgColor;
          this.__textColor = textColor;
          this.__width = width;
          this.__x = x;
          this.__y = y;
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__init(message);
        };

        com.amcharts.PopUp = v1;
        var v2 = v1.prototype;
        v2.__init = function (message) {
          var v2 = new com.amcharts.Text(this.__mc, 'popupText', 10, this.__x + this.__margins, this.__y + this.__margins, this.__width - 2 * this.__margins);
          v2.txt = message;
          v2.color = this.__textColor;
          v2.align = 'center';
          var v4 = 2 * this.__margins + v2.textHeight;
          var v3 = new com.amcharts.Rectangle(this.__mc, 'bg', 0, this.__width, v4, this.__bgColor);
          v3.mc._x = this.__x;
          v3.mc._y = this.__y;
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.remove = function () {
          removeMovieClip(this.__mc);
        };

        v2.__bgColor = 16777215;
        v2.__width = 300;
        v2.__textColor = 0;
        v2.__margins = 15;
        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.PopUp.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 19 __Packages.com.amcharts.XML2Object {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.XML2Object) {
        var v1 = function () {};

        com.amcharts.XML2Object = v1;
        var v2 = v1.prototype;
        v2.__get__xml = function () {
          return this.oXML;
        };

        v2.parseXML = function (sFile) {
          this.oResult = new Object();
          this.oXML = sFile;
          this.oResult = this.translateXML();
          return this.oResult;
        };

        v2.translateXML = function (from, path, name, position) {
          var v2;
          var v9;
          var v4;
          var v10;
          if (path == undefined) {
            path = this;
            name = 'oResult';
          }
          path = path[name];
          if (from == undefined) {
            from = new XML((this.__get__xml()).toString());
            from.ignoreWhite = true;
          }
          if (from.hasChildNodes()) {
            v9 = from.childNodes;
            if (position != undefined) {
              v10 = path;
              path = path[position];
            }
            while (v9.length > 0) {
              v4 = v9.shift();
              v2 = v4.nodeName;
              if (v2 != undefined) {
                var v5 = new Object();
                v5.attributes = v4.attributes;
                v5.data = v4.firstChild.nodeValue;
                if (position != undefined) {
                  v10 = path;
                }
                if (path[v2] != undefined) {
                  if (path[v2].__proto__ == Array.prototype) {
                    path[v2].push(v5);
                    name = v4.nodeName;
                    position = path[v2].length - 1;
                  } else {
                    var v8 = path[v2];
                    path[v2] = new Array();
                    path[v2].push(v8);
                    path[v2].push(v5);
                    name = v2;
                    position = path[v2].length - 1;
                  }
                } else {
                  path[v2] = v5;
                  name = v2;
                }
              }
              if (v4.hasChildNodes()) {
                this.translateXML(v4, path, name, position);
              }
            }
          }
          return this.oResult;
        };

        v2.oResult = new Object();
        v2.addProperty('xml', v2.__get__xml, function () {});
        ASSetPropFlags(com.amcharts.XML2Object.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 20 __Packages.com.amcharts.LineChart {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.LineChart) {
        var v1 = function () {
          super();
          this.__bg_mc._visible = false;
          this.__border_mc._visible = false;
          this.__width = this._width;
          this.__height = this._height;
          this._xscale = 100;
          this._yscale = 100;
          this.__labels_mc = this.createEmptyMovieClip('labels_mc', this.__labels_depth);
          this.__init();
        };

        com.amcharts.LineChart = v1;
        com.amcharts.LineChart extends MovieClip;
        var v2 = v1.prototype;
        v2.__init = function () {
          if (this.__data_obj != undefined) {
            this.__plotAreaWidth = this.__width - this.__lMargin - this.__rMargin;
            this.__plotAreaHeight = this.__height - this.__tMargin - this.__bMargin;
            this.__createChildren();
            this.__arrange();
            if (this.__showLegend == true) {
              this.__initLegend();
            }
            this.__build(this.__start, this.__end);
            if (this.__inited != true && this.__redraw == true) {
              this.__stageListener();
            }
            this.__inited = true;
          }
        };

        v2.__stageListener = function () {
          var main_obj = this;
          var v2 = new Object();
          v2.onResize = function () {
            main_obj.__resizeTime = 10;
          };

          Stage.addListener(v2);
          var v3 = setInterval(this.__countResizeTime, 10, [this]);
        };

        v2.__countResizeTime = function (params) {
          if (params[0].__resizeTime > 0) {
            --params[0].__resizeTime;
          }
          if (params[0].__resizeTime == 1) {
            params[0].__width = Stage.width;
            params[0].__height = Stage.height;
            params[0].__init();
            var v1 = 0;
            while (v1 < params[0].__labelsToRedraw.length) {
              params[0].__labelsToRedraw[v1].width = params[0].__width - params[0].__labelsToRedraw[v1].x;
              ++v1;
            }
          }
        };

        v2.__createChildren = function () {
          var v6 = new com.amcharts.Rectangle(this, 'area_mc', this.__area_depth, this.__plotAreaWidth, this.__plotAreaHeight + this.__axisXTickLength + this.__valueXTextSize + 15, 0);
          this.__area_mc = v6.mc;
          this.__area_mc._x = this.__lMargin;
          this.__area_mc._y = this.__tMargin;
          this.__area_mc._alpha = 0;
          this.__valueL_mc = this.createEmptyMovieClip('valueL_mc', this.__valueL_depth);
          this.__valueR_mc = this.createEmptyMovieClip('valueR_mc', this.__valueR_depth);
          this.__graphs_mc = this.createEmptyMovieClip('graphs_mc', this.__graphs_depth);
          this.__legend_mc = this.createEmptyMovieClip('legend_mc', this.__legend_depth);
          if (this.__axisXWidth == 0) {
            var v4 = new com.amcharts.Line(this, 'axisX_mc', this.__axisX_depth, [0, this.__plotAreaWidth + 1], [0, 0], 0, this.__axisXColor, this.__axisXAlpha);
          } else {
            var v4 = new com.amcharts.Rectangle(this, 'axisX_mc', this.__axisX_depth, this.__plotAreaWidth + 1, this.__axisXWidth, this.__axisXColor, 0, 0, 0, this.__axisXAlpha, 0);
          }
          if (this.__axisLWidth == 0) {
            var v3 = new com.amcharts.Line(this, 'axisL_mc', this.__axisL_depth, [0, 0], [0, this.__plotAreaHeight + 1], 0, this.__axisLColor, this.__axisLAlpha);
          } else {
            var v3 = new com.amcharts.Rectangle(this, 'axisL_mc', this.__axisL_depth, this.__axisLWidth, this.__plotAreaHeight + 1, this.__axisLColor, 0, 0, 0, this.__axisLAlpha, 0);
          }
          if (this.__axisRWidth == 0) {
            var v2 = new com.amcharts.Line(this, 'axisR_mc', this.__axisR_depth, [0, 0], [0, this.__plotAreaHeight + 1], 0, this.__axisRColor, this.__axisRAlpha);
          } else {
            var v2 = new com.amcharts.Rectangle(this, 'axisR_mc', this.__axisR_depth, this.__axisRWidth, this.__plotAreaHeight + 1, this.__axisRColor, 0, 0, 0, this.__axisRAlpha, 0);
          }
          this.__axisX_mc = v4.mc;
          this.__axisL_mc = v3.mc;
          this.__axisR_mc = v2.mc;
          var v5 = new com.amcharts.Rectangle(this, 'plotArea_mc', this.__plotArea_depth, this.__plotAreaWidth, this.__plotAreaHeight, this.__plotAreaColor, 0, 0, 0, this.__plotAreaAlpha, 0);
          this.__plotArea_mc = v5.mc;
          new com.amcharts.Rectangle(this, 'bg_mc', this.__bg_depth, this.__width, this.__height, this.__bgColor, 1, this.__borderColor, 0, this.__bgAlpha, this.__borderAlpha);
          this.__indicator_mc = this.createEmptyMovieClip('indicator_mc', this.__indicator_depth);
          this.__initZoom();
          if (this.__helpBalloon_str != undefined) {
            this.__initHelp();
          }
        };

        v2.__arrange = function () {
          this.__valueL_mc._x = 0;
          this.__valueL_mc._y = this.__tMargin + this.__plotAreaHeight;
          this.__valueR_mc._x = this.__lMargin + this.__plotAreaWidth;
          this.__valueR_mc._y = this.__tMargin + this.__plotAreaHeight;
          this.__graphs_mc._x = this.__lMargin;
          this.__graphs_mc._y = this.__tMargin + this.__plotAreaHeight;
          this.__axisX_mc._x = this.__lMargin;
          this.__axisX_mc._y = this.__tMargin + this.__plotAreaHeight - this.__axisX_mc._height;
          if (this.__axisX_mc._height > 0) {
            ++this.__axisX_mc._y;
          }
          this.__axisL_mc._x = this.__lMargin;
          this.__axisL_mc._y = this.__tMargin;
          this.__axisR_mc._x = this.__lMargin + this.__plotAreaWidth - this.__axisRWidth;
          this.__axisR_mc._y = this.__tMargin;
          if (this.__axisR_mc._width > 0) {
            ++this.__axisR_mc._x;
          }
          this.__plotArea_mc._x = this.__lMargin;
          this.__plotArea_mc._y = this.__tMargin;
          this.__indicator_mc._x = this.__lMargin;
          this.__indicator_mc._y = this.__tMargin;
          if (this.__legendX == undefined || this.__legendXRedraw == true) {
            this.__legendXRedraw = true;
            this.__legendX = this.__lMargin;
          }
          if (this.__legendY == undefined || this.__legendYRedraw == true) {
            this.__legendYRedraw = true;
            this.__legendY = this.__tMargin + this.__plotAreaHeight + this.__axisXTickLength + this.__valueXTextSize + 20;
          }
          if (this.__legendWidth == undefined || this.__legendWidthRedraw == true) {
            this.__legendWidthRedraw = true;
            this.__legendWidth = this.__plotAreaWidth;
          }
        };

        v2.__build = function (start, end) {
          var main_obj = this;
          this.__start = start;
          this.__end = end;
          if (this.__start == 0 && this.__end == this.__xCount) {
            this.__zoom_mc._visible = false;
          } else {
            this.__zoom_mc._visible = true;
          }
          var v3 = new Object();
          v3 = com.amcharts.CloneObject.clone(this.__data_obj);
          v3.xaxis.value = v3.xaxis.value.slice(this.__start, this.__end);
          var v2 = 0;
          while (v2 < this.__data_obj.graphs.graph.length) {
            v3.graphs.graph[v2].value = v3.graphs.graph[v2].value.slice(this.__start, this.__end);
            ++v2;
          }
          if (this.__data_obj.graphs.leftcount > 0) {
            var v5 = com.amcharts.MinMax.calculate(this.__minLD, this.__maxLD, 0, this.__xCount, v3.graphs, this.__gridLAprCount, 'left');
            this.__minL = v5[0];
            this.__maxL = v5[1];
            this.__stepL = v5[2];
            if (isNaN(this.__minL) != true && isNaN(this.__maxL) != true && Math.abs(this.__maxL) != Infinity && Math.abs(this.__minL) != Infinity) {
              var v10 = new com.amcharts.GridY(this, 'gridL_mc', this.__gridL_depth, this.__plotAreaWidth, this.__plotAreaHeight, this.__minL, this.__maxL, this.__stepL, this.__gridLDashed, this.__gridLDashLength, this.__gridLColor, this.__gridLAlpha);
              v10.mc._x = this.__lMargin;
              v10.mc._y = this.__tMargin + this.__plotAreaHeight;
              if (this.__valueLEnabled != false) {
                var v7 = new com.amcharts.ValuesY(this.__valueL_mc, this.__plotAreaHeight, this.__minL, this.__maxL, this.__stepL, this.__valueLFreq, 'right', this.__lMargin - this.__axisLTickLength, this.__valueLSkipFirst, this.__valueLSkipLast, this.__valueLColor, this.__valueLTextSize, this.__valueLUnit, this.__valueLUnitPosition);
                v7.ticks(this.__axisLColor, this.__axisLAlpha, this.__axisLTickLength);
              }
            }
          } else {
            this.__axisL_mc._visible = false;
          }
          if (this.__data_obj.graphs.rightcount > 0) {
            var v5 = com.amcharts.MinMax.calculate(this.__minRD, this.__maxRD, 0, this.__xCount, v3.graphs, this.__gridRAprCount, 'right');
            this.__minR = v5[0];
            this.__maxR = v5[1];
            this.__stepR = v5[2];
            if (isNaN(this.__minR) != true && isNaN(this.__maxR) != true && Math.abs(this.__maxR) != Infinity && Math.abs(this.__minR) != Infinity) {
              var v8 = new com.amcharts.GridY(this, 'gridR_mc', this.__gridR_depth, this.__plotAreaWidth, this.__plotAreaHeight, this.__minR, this.__maxR, this.__stepR, this.__gridRDashed, this.__gridRDashLength, this.__gridRColor, this.__gridRAlpha);
              v8.mc._x = this.__lMargin;
              v8.mc._y = this.__tMargin + this.__plotAreaHeight;
              if (this.__valueREnabled != false) {
                var v7 = new com.amcharts.ValuesY(this.__valueR_mc, this.__plotAreaHeight, this.__minR, this.__maxR, this.__stepR, this.__valueRFreq, 'left', this.__rMargin - this.__axisRTickLength, this.__valueRSkipFirst, this.__valueRSkipLast, this.__valueRColor, this.__valueRTextSize, this.__valueRUnit, this.__valueRUnitPosition);
                v7.ticks(this.__axisRColor, this.__axisRAlpha, this.__axisRTickLength);
              }
            }
          } else {
            this.__axisR_mc._visible = false;
          }
          if (isNaN(this.__minR) == true && isNaN(this.__minL) == true) {
            var v9 = this.__plotAreaWidth * 0.7;
            var v12 = this.__lMargin + (this.__plotAreaWidth - v9) / 2;
            var v11 = this.__tMargin + this.__plotAreaHeight / 2.5;
            this.__popUp = new com.amcharts.PopUp(this, 'popUp', this.__popUp_depth, this.__noData_str, v12, v11, v9, this.__indicatorLineColor, this.__xBalloonTextColor);
          }
          var v6 = new com.amcharts.GridX(this, 'gridX_mc', this.__gridX_depth, v3.xaxis, this.__gridXAprCount, this.__plotAreaWidth, this.__plotAreaHeight, this.__gridXDashed, this.__gridXDashLength, this.__gridXColor, this.__gridXAlpha);
          if (this.__valueXEnabled != false) {
            v6.values(this.__valueXFreq, this.__valueXSkipFirst, this.__valueXSkipLast, this.__valueXColor, this.__valueXTextSize);
            v6.ticks(this.__axisXColor, this.__axisXAlpha, this.__axisXTickLength);
          }
          v6.show();
          v6.mc._x = this.__lMargin;
          v6.mc._y = this.__tMargin + this.__plotAreaHeight;
          if (this.__showIndicator == true) {
            this.__indicator.remove();
            this.__indicator = new com.amcharts.Indicator(this, this.__indicator_mc, this.__plotAreaWidth, this.__plotAreaHeight, this.__axisXTickLength, v3, this.__area_mc);
            this.__indicator.__set__lineColor(this.__indicatorLineColor);
            this.__indicator.__set__lineAlpha(this.__indicatorLineAlpha);
            this.__indicator.__set__selectionColor(this.__indicatorSelectionColor);
            this.__indicator.__set__selectionAlpha(this.__indicatorSelectionAlpha);
            this.__indicator.__set__xBalloonColor(this.__indicatorLineColor);
            this.__indicator.setMargins(this.__lMargin, this.__tMargin, this.__rMargin, this.__bMargin);
            this.__indicator.__set__zoomable(this.__zoomable);
            this.__indicator.__set__xBalloonTextColor(this.__xBalloonTextColor);
            this.__indicator.__set__xBalloonTextSize(this.__valueXTextSize);
            this.__indicator.__set__xBalloonEnabled(this.__xBalloonEnabled);
            this.__indicator.show();
          }
          v2 = 0;
          while (v2 < this.__data_obj.graphs.graph.length) {
            this.__graphs_mc.createEmptyMovieClip('graph' + v2, this.__data_obj.graphs.graph.length - v2);
            this.__graphs_mc['graph' + v2].id = v2;
            if (this.__graphSelected[v2] == undefined) {
              this.__graphSelected[v2] = this.__data_obj.graphs.graph[v2].selected;
            }
            if (this.__graphHidden[v2] == undefined) {
              this.__graphHidden[v2] = this.__data_obj.graphs.graph[v2].hidden;
            }
            if (this.__checkForData(v3.graphs.graph[v2].value) == true) {
              if (this.__data_obj.graphs.graph[v2].axis == 'right') {
                var v4 = new com.amcharts.Graph(this.__graphs_mc['graph' + v2], this.__plotAreaWidth, this.__plotAreaHeight, v3.graphs.graph[v2], this.__minR, this.__maxR, this.__isConnected, this.__hideBulletsCount, this.__yBalloonOnOff, this.__path);
              } else {
                var v4 = new com.amcharts.Graph(this.__graphs_mc['graph' + v2], this.__plotAreaWidth, this.__plotAreaHeight, v3.graphs.graph[v2], this.__minL, this.__maxL, this.__isConnected, this.__hideBulletsCount, this.__yBalloonOnOff, this.__path);
              }
              if (this.__yBalloonOnOff == true && this.__showIndicator == true) {
                this.__graphs_mc['graph' + v2].hitArea_mc.onRollOver = function () {
                  main_obj.__graphRollOver(this._parent.id);
                };

                this.__graphs_mc['graph' + v2].hitArea_mc.onReleaseOutside = function () {
                  main_obj.__graphRollOut(this._parent.id);
                };

                this.__graphs_mc['graph' + v2].hitArea_mc.onRollOut = this.__graphs_mc['graph' + v2].hitArea_mc.onReleaseOutside;
                this.__graphs_mc['graph' + v2].hitArea_mc.onRelease = function () {
                  main_obj.__graphRelease(this._parent.id);
                };

              }
              this.__indicator.yBalloon(v2, v4.y);
              if (this.__graphSelected[v2] == true) {
                this.__selectGraph(v2);
              } else {
                this.__deselectGraph(v2);
              }
              if (this.__graphHidden[v2] == true) {
                this.__hideGraph(v2);
              }
            }
            ++v2;
          }
        };

        v2.__checkForData = function (data_obj) {
          var v1 = 0;
          while (v1 < data_obj.length) {
            if (isNaN(data_obj[v1].value) == false) {
              return true;
            }
            ++v1;
          }
          return false;
        };

        v2.makeZoom = function (start, end) {
          this.__build(this.__start + start, this.__start + end);
        };

        v2.__initLegend = function () {
          var main_obj = this;
          this.__legend = new com.amcharts.Legend(this, 'legend', this.__legend_depth, this.__data_obj.graphs, this.__legendWidth);
          (this.__legend.__get__mc())._x = this.__legendX;
          (this.__legend.__get__mc())._y = this.__legendY;
          this.__legend.__set__textColor(this.__legendTextColor);
          this.__legend.__set__textColorHover(this.__legendTextColorHover);
          this.__legend.__set__bgColor(this.__legendBgColor);
          this.__legend.__set__bgAlpha(this.__legendBgAlpha);
          this.__legend.__set__borderColor(this.__legendBorderColor);
          this.__legend.__set__borderAlpha(this.__legendBorderAlpha);
          this.__legend.__set__keySize(this.__legendKeySize);
          this.__legend.__set__keySize(this.__legendKeySize);
          this.__legend.__set__keyBorderColor(this.__legendKeyBorderColor);
          this.__legend.__set__keyMarkColor(this.__legendKeyMarkColor);
          this.__legend.__set__onOff(this.__legendOnOff);
          this.__legend.__set__yBalloonOnOff(this.__yBalloonOnOff);
          this.__legend.__set__textSize(this.__legendTextSize);
          this.__legend.__set__spacing(this.__legendSpacing);
          this.__legend.__set__margins(this.__legendMargins);
          this.__legend.__set__showIndicator(this.__showIndicator);
          this.__legend.show();
          var v2 = new Object();
          v2.showGraph = function (evtObj) {
            main_obj.__showGraph(evtObj.id);
          };

          v2.hideGraph = function (evtObj) {
            main_obj.__hideGraph(evtObj.id);
            main_obj.__graphs_mc['graph' + evtObj.id]._visible = false;
          };

          v2.rollOver = function (evtObj) {
            main_obj.__graphRollOver(evtObj.id);
          };

          v2.rollOut = function (evtObj) {
            main_obj.__graphRollOut(evtObj.id);
          };

          v2.select = function (evtObj) {
            main_obj.__selectGraph(evtObj.id);
          };

          v2.deselect = function (evtObj) {
            main_obj.__deselectGraph(evtObj.id);
          };

          this.__legend.addEventListener('showGraph', v2);
          this.__legend.addEventListener('hideGraph', v2);
          this.__legend.addEventListener('rollOver', v2);
          this.__legend.addEventListener('rollOut', v2);
          this.__legend.addEventListener('select', v2);
          this.__legend.addEventListener('deselect', v2);
        };

        v2.__showGraph = function (id) {
          this.__graphs_mc['graph' + id]._visible = true;
          this.__graphHidden[id] = false;
          if (this.__graphSelected[id] == true) {
            this.__indicator.showYBalloon(id);
          }
        };

        v2.__hideGraph = function (id) {
          this.__graphs_mc['graph' + id]._visible = false;
          this.__graphHidden[id] = true;
          this.__indicator.hideYBalloon(id);
        };

        v2.__selectGraph = function (id) {
          this.__graphSelected[id] = true;
          (this.__legend.button(id)).__set__pushed(true);
          if (this.__graphHidden[id] == false) {
            this.__indicator.showYBalloon(id);
          }
        };

        v2.__deselectGraph = function (id) {
          this.__graphSelected[id] = false;
          (this.__legend.button(id)).__set__pushed(false);
          this.__indicator.hideYBalloon(id);
        };

        v2.__graphRollOver = function (id) {
          var v3 = new Color(this.__graphs_mc['graph' + id].graph_mc);
          v3.setRGB(this.__data_obj.graphs.graph[id].colorHover);
          (this.__legend.button(id)).__set__hover(true);
        };

        v2.__graphRollOut = function (id) {
          var v3 = new Color(this.__graphs_mc['graph' + id].graph_mc);
          v3.setRGB(this.__data_obj.graphs.graph[id].color);
          (this.__legend.button(id)).__set__hover(false);
        };

        v2.__graphRelease = function (id) {
          if (this.__graphSelected[id] == true) {
            this.__deselectGraph(id);
          } else {
            this.__selectGraph(id);
          }
          (this.__legend.button(id)).__set__hover(true);
        };

        v2.__initZoom = function () {
          var main_obj = this;
          var v2 = new com.amcharts.Button(this, 'zoom_mc', this.__zoom_depth, this.__zoom_str);
          v2.cornerRadius = 0;
          v2.borderWidth = 0;
          v2.borderAlpha = 0;
          v2.bgColorActive = this.__zoomBgColor;
          v2.bgColorHover = v2.bgColorActive;
          v2.bgColor = v2.bgColorActive;
          v2.bgAlphaActive = this.__zoomBgAlpha;
          v2.bgAlphaHover = v2.bgAlphaActive;
          v2.bgAlpha = v2.bgAlphaActive;
          v2.hPadding = 5;
          v2.attachIcon('lens_mc', true);
          v2.textColor = this.__zoomTextColor;
          v2.textColorHover = this.__zoomTextColorHover;
          v2.textSize = this.__zoomTextSize;
          v2.show();
          this.__zoom_mc = v2.mc;
          if (this.__zoomX == undefined || isNaN(this.__zoomX) == true) {
            this.__zoom_mc._x = this.__plotAreaWidth - this.__zoom_mc._width + this.__lMargin;
          } else {
            this.__zoom_mc._x = this.__zoomX;
          }
          if (this.__zoomY == undefined || isNaN(this.__zoomY) == true) {
            this.__zoom_mc._y = this.__tMargin;
          } else {
            this.__zoom_mc._y = this.__zoomY;
          }
          var v3 = new Object();
          v3.press = function (evtObj) {
            main_obj.__build(0, main_obj.__xCount);
            main_obj.__popUp.remove();
          };

          v2.addEventListener('press', v3);
          this.__zoom_mc._visible = false;
        };

        v2.__initHelp = function () {
          var main_obj = this;
          var v2 = new com.amcharts.Button(this, 'help_mc', this.__helpButton_depth, this.__helpButton_str);
          v2.cornerRadius = 0;
          v2.borderWidth = 0;
          v2.borderAlpha = 0;
          v2.bgColorActive = this.__helpButtonBgColor;
          v2.bgColorHover = v2.bgColorActive;
          v2.bgColor = v2.bgColorActive;
          v2.bgAlphaActive = this.__helpButtonBgAlpha;
          v2.bgAlphaHover = v2.bgAlphaActive;
          v2.bgAlpha = v2.bgAlphaActive;
          v2.hPadding = 10;
          v2.bold = true;
          v2.textColor = this.__helpButtonTextColor;
          v2.textColorActive = this.__helpButtonTextColorHover;
          v2.textColorHover = v2.textColorActive;
          v2.textSize = this.__helpButtonTextSize;
          v2.show();
          this.__helpButton_mc = v2.mc;
          if (this.__helpButtonX == undefined || isNaN(this.__helpButtonX) == true) {
            this.__helpButton_mc._x = this.__width - this.__helpButton_mc._width;
          } else {
            this.__helpButton_mc._x = this.__helpButtonX;
          }
          if (this.__helpButtonY == undefined || isNaN(this.__helpButtonY) == true) {
            this.__helpButton_mc._y = 0;
          } else {
            this.__helpButton_mc._y = this.__helpButtonY;
          }
          var v3 = new com.amcharts.Balloon(this, 'helpBalloon', this.__helpBalloon_depth, this.__helpBalloon_str, 0, 0, this.__width, this.__height, this.__helpBalloonWidth);
          var v6;
          var v5;
          if (this.__helpButton_mc._x < this.__width / 2) {
            v6 = this.__helpButton_mc._x + this.__helpButton_mc._width;
          } else {
            v6 = this.__helpButton_mc._x;
          }
          if (this.__helpButton_mc._y > this.__height / 2) {
            v5 = this.__helpButton_mc._y + this.__helpButton_mc._height;
          } else {
            v5 = this.__helpButton_mc._y;
          }
          v3.pointTo(v6, v5);
          v3.hMargins = 10;
          v3.pointerWidth = 0;
          v3.distance = 0;
          v3.vMargins = 10;
          v3.pointerPosition = 'horizontal';
          v3.borderColor = this.__helpBalloonBgColor;
          v3.bgColor = v3.borderColor;
          v3.bgAlpha = this.__helpBalloonBgAlpha;
          v3.borderAlpha = 0;
          v3.textColor = this.__helpBalloonTextColor;
          v3.textSize = this.__helpBalloonTextSize;
          v3.show();
          this.__helpBalloon_mc = v3.mc;
          this.__helpBalloon_mc._visible = false;
          var v4 = new Object();
          v4.rollOver = function (evtObj) {
            main_obj.__helpBalloon_mc._visible = true;
          };

          v4.rollOut = function (evtObj) {
            main_obj.__helpBalloon_mc._visible = false;
          };

          v2.addEventListener('rollOver', v4);
          v2.addEventListener('rollOut', v4);
        };

        v2.addLabel = function (htmlText, align, x, y, width, textSize, textColor) {
          var v3 = this.__labels_mc.getNextHighestDepth();
          if (isNaN(x) == true) {
            x = 0;
          }
          if (isNaN(y) == true) {
            y = 0;
          }
          this.__labelsToRedraw = new Array();
          var v4 = false;
          if (isNaN(width) == true) {
            v4 = true;
            width = this.__width - x;
          }
          var v2 = new com.amcharts.Text(this.__labels_mc, 'label' + v3, v3, x, y, width, this.__height);
          v2.htmlTxt = htmlText;
          v2.size = textSize;
          v2.color = textColor;
          v2.align = align;
          if (v4 == true) {
            this.__labelsToRedraw.push(v2);
          }
          return v2;
        };

        v2.__set__dataProvider = function (param) {
          if (param != '' && param != undefined) {
            var v2 = new com.amcharts.ParseData(this.__graphSettings);
            if (this.__dataType == 'xml') {
              this.__data_obj = v2.parseXML(param);
            } else {
              this.__data_obj = v2.parseCSV(param, this.__csvSeparator);
            }
            this.__xCount = this.__data_obj.xaxis.value.length;
            this.__end = this.__xCount;
          }
          this.__init();
          null;
          null;
          return this.__get__dataProvider();
        };

        v2.__set__csvSeparator = function (param) {
          if (param != undefined) {
            this.__csvSeparator = param;
          }
          null;
          null;
          return this.__get__csvSeparator();
        };

        v2.__set__dataType = function (param) {
          if (param != undefined) {
            this.__dataType = param;
          }
          null;
          null;
          return this.__get__dataType();
        };

        v2.__set__width = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__width = param;
          }
          null;
          null;
          return this.__get__width();
        };

        v2.__set__height = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__height = param;
          }
          null;
          null;
          return this.__get__height();
        };

        v2.__set__connect = function (param) {
          this.__isConnected = param;
          null;
          null;
          return this.__get__connect();
        };

        v2.__set__redraw = function (param) {
          if (param != undefined) {
            this.__redraw = param;
          }
          null;
          null;
          return this.__get__redraw();
        };

        v2.__set__hideBulletsCount = function (param) {
          this.__hideBulletsCount = param;
          null;
          null;
          return this.__get__hideBulletsCount();
        };

        v2.__set__plotAreaColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__plotAreaColor = param;
          }
          null;
          null;
          return this.__get__plotAreaColor();
        };

        v2.__set__plotAreaAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__plotAreaAlpha = param;
          }
          null;
          null;
          return this.__get__plotAreaAlpha();
        };

        v2.__set__bgColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__bgColor = param;
          }
          null;
          null;
          return this.__get__bgColor();
        };

        v2.__set__bgAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__bgAlpha = param;
          }
          null;
          null;
          return this.__get__bgAlpha();
        };

        v2.__set__borderColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__borderColor = param;
          }
          null;
          null;
          return this.__get__borderColor();
        };

        v2.__set__borderAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__borderAlpha = param;
          }
          null;
          null;
          return this.__get__borderAlpha();
        };

        v2.__set__leftMargin = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__lMargin = param;
          }
          null;
          null;
          return this.__get__leftMargin();
        };

        v2.__set__topMargin = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__tMargin = param;
          }
          null;
          null;
          return this.__get__topMargin();
        };

        v2.__set__rightMargin = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__rMargin = param;
          }
          null;
          null;
          return this.__get__rightMargin();
        };

        v2.__set__bottomMargin = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__bMargin = param;
          }
          null;
          null;
          return this.__get__bottomMargin();
        };

        v2.__set__gridXApproxCount = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridXAprCount = param;
          }
          null;
          null;
          return this.__get__gridXApproxCount();
        };

        v2.__set__gridXDashed = function (param) {
          if (param != undefined) {
            this.__gridXDashed = param;
          }
          null;
          null;
          return this.__get__gridXDashed();
        };

        v2.__set__gridXDashLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridXDashLength = param;
          }
          null;
          null;
          return this.__get__gridXDashLength();
        };

        v2.__set__gridXAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridXAlpha = param;
          }
          null;
          null;
          return this.__get__gridXAlpha();
        };

        v2.__set__gridXColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridXColor = param;
          }
          null;
          null;
          return this.__get__gridXColor();
        };

        v2.__set__gridLApproxCount = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridLAprCount = param;
          }
          null;
          null;
          return this.__get__gridLApproxCount();
        };

        v2.__set__gridLDashed = function (param) {
          if (param != undefined) {
            this.__gridLDashed = param;
          }
          null;
          null;
          return this.__get__gridLDashed();
        };

        v2.__set__gridLDashLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridLDashLength = param;
          }
          null;
          null;
          return this.__get__gridLDashLength();
        };

        v2.__set__gridLAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridLAlpha = param;
          }
          null;
          null;
          return this.__get__gridLAlpha();
        };

        v2.__set__gridLColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridLColor = param;
          }
          null;
          null;
          return this.__get__gridLColor();
        };

        v2.__set__gridRApproxCount = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridRAprCount = param;
          }
          null;
          null;
          return this.__get__gridRApproxCount();
        };

        v2.__set__gridRDashed = function (param) {
          if (param != undefined) {
            this.__gridRDashed = param;
          }
          null;
          null;
          return this.__get__gridRDashed();
        };

        v2.__set__gridRDashLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridRDashLength = param;
          }
          null;
          null;
          return this.__get__gridRDashLength();
        };

        v2.__set__gridRAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridRAlpha = param;
          }
          null;
          null;
          return this.__get__gridRAlpha();
        };

        v2.__set__gridRColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__gridRColor = param;
          }
          null;
          null;
          return this.__get__gridRColor();
        };

        v2.__set__valueXFreq = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueXFreq = param;
          }
          null;
          null;
          return this.__get__valueXFreq();
        };

        v2.__set__valueLFreq = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueLFreq = param;
          }
          null;
          null;
          return this.__get__valueLFreq();
        };

        v2.__set__valueRFreq = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueRFreq = param;
          }
          null;
          null;
          return this.__get__valueRFreq();
        };

        v2.__set__valueXEnabled = function (param) {
          if (param != undefined) {
            this.__valueXEnabled = param;
          }
          null;
          null;
          return this.__get__valueXEnabled();
        };

        v2.__set__valueLEnabled = function (param) {
          if (param != undefined) {
            this.__valueLEnabled = param;
          }
          null;
          null;
          return this.__get__valueLEnabled();
        };

        v2.__set__valueREnabled = function (param) {
          if (param != undefined) {
            this.__valueREnabled = param;
          }
          null;
          null;
          return this.__get__valueREnabled();
        };

        v2.__set__valueXSkipFirst = function (param) {
          if (param != undefined) {
            this.__valueXSkipFirst = param;
          }
          null;
          null;
          return this.__get__valueXSkipFirst();
        };

        v2.__set__valueLSkipFirst = function (param) {
          if (param != undefined) {
            this.__valueLSkipFirst = param;
          }
          null;
          null;
          return this.__get__valueLSkipFirst();
        };

        v2.__set__valueRSkipFirst = function (param) {
          if (param != undefined) {
            this.__valueRSkipFirst = param;
          }
          null;
          null;
          return this.__get__valueRSkipFirst();
        };

        v2.__set__valueXSkipLast = function (param) {
          if (param != undefined) {
            this.__valueXSkipLast = param;
          }
          null;
          null;
          return this.__get__valueXSkipLast();
        };

        v2.__set__valueLSkipLast = function (param) {
          if (param != undefined) {
            this.__valueLSkipLast = param;
          }
          null;
          null;
          return this.__get__valueLSkipLast();
        };

        v2.__set__valueRSkipLast = function (param) {
          if (param != undefined) {
            this.__valueRSkipLast = param;
          }
          null;
          null;
          return this.__get__valueRSkipLast();
        };

        v2.__set__valueXColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueXColor = param;
          }
          null;
          null;
          return this.__get__valueXColor();
        };

        v2.__set__valueXTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueXTextSize = param;
          }
          null;
          null;
          return this.__get__valueXTextSize();
        };

        v2.__set__valueLColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueLColor = param;
          }
          null;
          null;
          return this.__get__valueLColor();
        };

        v2.__set__valueLTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueLTextSize = param;
          }
          null;
          null;
          return this.__get__valueLTextSize();
        };

        v2.__set__valueRColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueRColor = param;
          }
          null;
          null;
          return this.__get__valueRColor();
        };

        v2.__set__valueRTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__valueRTextSize = param;
          }
          null;
          null;
          return this.__get__valueRTextSize();
        };

        v2.__set__valueRUnit = function (param) {
          if (param != undefined) {
            this.__valueRUnit = param;
          }
          null;
          null;
          return this.__get__valueRUnit();
        };

        v2.__set__valueRUnitPosition = function (param) {
          this.__valueRUnitPosition = param;
          null;
          null;
          return this.__get__valueRUnitPosition();
        };

        v2.__set__valueLUnit = function (param) {
          if (param != undefined) {
            this.__valueLUnit = param;
          }
          null;
          null;
          return this.__get__valueLUnit();
        };

        v2.__set__valueLUnitPosition = function (param) {
          this.__valueLUnitPosition = param;
          null;
          null;
          return this.__get__valueLUnitPosition();
        };

        v2.__set__minLeft = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__minLD = param;
          }
          null;
          null;
          return this.__get__minLeft();
        };

        v2.__set__maxLeft = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__maxLD = param;
          }
          null;
          null;
          return this.__get__maxLeft();
        };

        v2.__set__minRight = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__minRD = param;
          }
          null;
          null;
          return this.__get__minRight();
        };

        v2.__set__maxRight = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__maxRD = param;
          }
          null;
          null;
          return this.__get__maxRight();
        };

        v2.__set__axisXAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisXAlpha = param;
          }
          null;
          null;
          return this.__get__axisXAlpha();
        };

        v2.__set__axisXWidth = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisXWidth = param;
          }
          null;
          null;
          return this.__get__axisXWidth();
        };

        v2.__set__axisXColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisXColor = param;
          }
          null;
          null;
          return this.__get__axisXColor();
        };

        v2.__set__axisXTickLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisXTickLength = param;
          }
          null;
          null;
          return this.__get__axisXTickLength();
        };

        v2.__set__axisLAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisLAlpha = param;
          }
          null;
          null;
          return this.__get__axisLAlpha();
        };

        v2.__set__axisLWidth = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisLWidth = param;
          }
          null;
          null;
          return this.__get__axisLWidth();
        };

        v2.__set__axisLColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisLColor = param;
          }
          null;
          null;
          return this.__get__axisLColor();
        };

        v2.__set__axisLTickLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisLTickLength = param;
          }
          null;
          null;
          return this.__get__axisLTickLength();
        };

        v2.__set__axisRAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisRAlpha = param;
          }
          null;
          null;
          return this.__get__axisRAlpha();
        };

        v2.__set__axisRWidth = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisRWidth = param;
          }
          null;
          null;
          return this.__get__axisRWidth();
        };

        v2.__set__axisRColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisRColor = param;
          }
          null;
          null;
          return this.__get__axisRColor();
        };

        v2.__set__axisRTickLength = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__axisRTickLength = param;
          }
          null;
          null;
          return this.__get__axisRTickLength();
        };

        v2.__set__showIndicator = function (param) {
          if (param != undefined) {
            this.__showIndicator = param;
          }
          null;
          null;
          return this.__get__showIndicator();
        };

        v2.__set__zoomable = function (param) {
          if (param != undefined) {
            this.__zoomable = param;
          }
          null;
          null;
          return this.__get__zoomable();
        };

        v2.__set__indicatorLineColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__indicatorLineColor = param;
          }
          null;
          null;
          return this.__get__indicatorLineColor();
        };

        v2.__set__indicatorLineAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__indicatorLineAlpha = param;
          }
          null;
          null;
          return this.__get__indicatorLineAlpha();
        };

        v2.__set__indicatorSelectionColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__indicatorSelectionColor = param;
          }
          null;
          null;
          return this.__get__indicatorSelectionColor();
        };

        v2.__set__indicatorSelectionAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__indicatorSelectionAlpha = param;
          }
          null;
          null;
          return this.__get__indicatorSelectionAlpha();
        };

        v2.__set__xBalloonTextColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__xBalloonTextColor = param;
          }
          null;
          null;
          return this.__get__xBalloonTextColor();
        };

        v2.__set__xBalloonEnabled = function (param) {
          if (param != undefined) {
            this.__xBalloonEnabled = param;
          }
          null;
          null;
          return this.__get__xBalloonEnabled();
        };

        v2.__set__yBalloonOnOff = function (param) {
          if (param != undefined) {
            this.__yBalloonOnOff = param;
          }
          null;
          null;
          return this.__get__yBalloonOnOff();
        };

        v2.__set__showLegend = function (param) {
          if (param != undefined) {
            this.__showLegend = param;
          }
          null;
          null;
          return this.__get__showLegend();
        };

        v2.__set__OnOff = function (param) {
          if (param != undefined) {
            this.__legendOnOff = param;
          }
          null;
          null;
          return this.__get__OnOff();
        };

        v2.__set__legendX = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendX = param;
          }
          null;
          null;
          return this.__get__legendX();
        };

        v2.__set__legendY = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendY = param;
          }
          null;
          null;
          return this.__get__legendY();
        };

        v2.__set__legendWidth = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendWidth = param;
          }
          null;
          null;
          return this.__get__legendWidth();
        };

        v2.__set__legendBgColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendBgColor = param;
          }
          null;
          null;
          return this.__get__legendBgColor();
        };

        v2.__set__legendBgAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendBgAlpha = param;
          }
          null;
          null;
          return this.__get__legendBgAlpha();
        };

        v2.__set__legendBorderColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendBorderColor = param;
          }
          null;
          null;
          return this.__get__legendBorderColor();
        };

        v2.__set__legendBorderAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendBorderAlpha = param;
          }
          null;
          null;
          return this.__get__legendBorderAlpha();
        };

        v2.__set__legendKeySize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendKeySize = param;
          }
          null;
          null;
          return this.__get__legendKeySize();
        };

        v2.__set__legendKeyBorderColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendKeyBorderColor = param;
          }
          null;
          null;
          return this.__get__legendKeyBorderColor();
        };

        v2.__set__legendKeyMarkColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendKeyMarkColor = param;
          }
          null;
          null;
          return this.__get__legendKeyMarkColor();
        };

        v2.__set__legendTextColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendTextColor = param;
          }
          null;
          null;
          return this.__get__legendTextColor();
        };

        v2.__set__legendTextColorHover = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendTextColorHover = param;
          }
          null;
          null;
          return this.__get__legendTextColorHover();
        };

        v2.__set__legendTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendTextSize = param;
          }
          null;
          null;
          return this.__get__legendTextSize();
        };

        v2.__set__legendSpacing = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendSpacing = param;
          }
          null;
          null;
          return this.__get__legendSpacing();
        };

        v2.__set__legendMargins = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__legendMargins = param;
          }
          null;
          null;
          return this.__get__legendMargins();
        };

        v2.__set__zoomX = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomX = param;
          }
          null;
          null;
          return this.__get__zoomX();
        };

        v2.__set__zoomY = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomY = param;
          }
          null;
          null;
          return this.__get__zoomY();
        };

        v2.__set__zoomBgColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomBgColor = param;
          }
          null;
          null;
          return this.__get__zoomBgColor();
        };

        v2.__set__zoomBgAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomBgAlpha = param;
          }
          null;
          null;
          return this.__get__zoomBgAlpha();
        };

        v2.__set__zoomTextColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomTextColor = param;
          }
          null;
          null;
          return this.__get__zoomTextColor();
        };

        v2.__set__zoomTextColorHover = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomTextColorHover = param;
          }
          null;
          null;
          return this.__get__zoomTextColorHover();
        };

        v2.__set__zoomTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__zoomTextSize = param;
          }
          null;
          null;
          return this.__get__zoomTextSize();
        };

        v2.__set__zoomText = function (param) {
          if (param != undefined) {
            this.__zoom_str = param;
          }
          null;
          null;
          return this.__get__zoomText();
        };

        v2.__set__helpButtonX = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonX = param;
          }
          null;
          null;
          return this.__get__helpButtonX();
        };

        v2.__set__helpButtonY = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonY = param;
          }
          null;
          null;
          return this.__get__helpButtonY();
        };

        v2.__set__helpButtonBgColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonBgColor = param;
          }
          null;
          null;
          return this.__get__helpButtonBgColor();
        };

        v2.__set__helpButtonBgAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonBgAlpha = param;
          }
          null;
          null;
          return this.__get__helpButtonBgAlpha();
        };

        v2.__set__helpButtonTextColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonTextColor = param;
          }
          null;
          null;
          return this.__get__helpButtonTextColor();
        };

        v2.__set__helpButtonTextColorHover = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonTextColorHover = param;
          }
          null;
          null;
          return this.__get__helpButtonTextColorHover();
        };

        v2.__set__helpButtonTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpButtonTextSize = param;
          }
          null;
          null;
          return this.__get__helpButtonTextSize();
        };

        v2.__set__helpButtonText = function (param) {
          this.__helpButton_str = param;
          null;
          null;
          return this.__get__helpButtonText();
        };

        v2.__set__helpBalloonWidth = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpBalloonWidth = param;
          }
          null;
          null;
          return this.__get__helpBalloonWidth();
        };

        v2.__set__helpBalloonBgColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpBalloonBgColor = param;
          }
          null;
          null;
          return this.__get__helpBalloonBgColor();
        };

        v2.__set__helpBalloonBgAlpha = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpBalloonBgAlpha = param;
          }
          null;
          null;
          return this.__get__helpBalloonBgAlpha();
        };

        v2.__set__helpBalloonTextColor = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpBalloonTextColor = param;
          }
          null;
          null;
          return this.__get__helpBalloonTextColor();
        };

        v2.__set__helpBalloonTextSize = function (param) {
          if (param != undefined && isNaN(param) == false) {
            this.__helpBalloonTextSize = param;
          }
          null;
          null;
          return this.__get__helpBalloonTextSize();
        };

        v2.__set__helpBalloonText = function (param) {
          this.__helpBalloon_str = param;
          null;
          null;
          return this.__get__helpBalloonText();
        };

        v2.__set__graphSettings = function (param) {
          this.__graphSettings = param;
          null;
          null;
          return this.__get__graphSettings();
        };

        v2.__set__noDataText = function (param) {
          if (param != undefined) {
            this.__noData_str = param;
          }
          null;
          null;
          return this.__get__noDataText();
        };

        v2.__set__path = function (param) {
          this.__path = param;
          null;
          null;
          return this.__get__path();
        };

        v2.__inited = false;
        v2.__noData_str = 'There is no data for selected period';
        v2.__graphSelected = new Array();
        v2.__graphHidden = new Array();
        v2.__start = 0;
        v2.__end = 0;
        v2.__csvSeparator = ';';
        v2.__dataType = 'xml';
        v2.__isConnected = false;
        v2.__hideBulletsCount = 0;
        v2.__resizeTime = 0;
        v2.__redraw = false;
        v2.__bgColor = 16777215;
        v2.__bgAlpha = 0;
        v2.__borderColor = 16777215;
        v2.__borderAlpha = 0;
        v2.__plotAreaColor = 16777215;
        v2.__plotAreaAlpha = 0;
        v2.__tMargin = 60;
        v2.__lMargin = 60;
        v2.__rMargin = 60;
        v2.__bMargin = 80;
        v2.__gridXAprCount = 5;
        v2.__gridXDashed = false;
        v2.__gridXDashLength = 5;
        v2.__gridXColor = 0;
        v2.__gridXAlpha = 15;
        v2.__gridLAprCount = 10;
        v2.__gridLDashed = false;
        v2.__gridLDashLength = 5;
        v2.__gridLColor = 0;
        v2.__gridLAlpha = 15;
        v2.__gridRAprCount = 10;
        v2.__gridRDashed = true;
        v2.__gridRDashLength = 5;
        v2.__gridRColor = 0;
        v2.__gridRAlpha = 15;
        v2.__valueXFreq = 1;
        v2.__valueLFreq = 1;
        v2.__valueRFreq = 1;
        v2.__valueXSkipFirst = false;
        v2.__valueXSkipLast = false;
        v2.__valueLSkipFirst = true;
        v2.__valueLSkipLast = false;
        v2.__valueRSkipFirst = true;
        v2.__valueRSkipLast = false;
        v2.__valueLUnit = '';
        v2.__valueRUnit = '';
        v2.__axisXAlpha = 100;
        v2.__axisXWidth = 2;
        v2.__axisXColor = 0;
        v2.__axisXTickLength = 7;
        v2.__axisLAlpha = 100;
        v2.__axisLWidth = 2;
        v2.__axisLColor = 0;
        v2.__axisLTickLength = 7;
        v2.__axisRAlpha = 100;
        v2.__axisRWidth = 2;
        v2.__axisRColor = 0;
        v2.__axisRTickLength = 7;
        v2.__showIndicator = true;
        v2.__zoomable = true;
        v2.__indicatorLineColor = 12303104;
        v2.__indicatorLineAlpha = 100;
        v2.__indicatorSelectionColor = 12303104;
        v2.__indicatorSelectionAlpha = 25;
        v2.__xBalloonEnabled = true;
        v2.__yBalloonOnOff = true;
        v2.__showLegend = true;
        v2.__legendOnOff = true;
        v2.__legendBgColor = 16777215;
        v2.__legendBgAlpha = 0;
        v2.__legendBorderColor = 0;
        v2.__legendBorderAlpha = 0;
        v2.__legendKeySize = 16;
        v2.__legendKeyMarkColor = 16777215;
        v2.__legendTextColorHover = 12303104;
        v2.__legendSpacing = 10;
        v2.__legendMargins = 0;
        v2.__legendXRedraw = false;
        v2.__legendYRedraw = false;
        v2.__legendWidthRedraw = false;
        v2.__zoomBgColor = 12303104;
        v2.__zoomBgAlpha = 0;
        v2.__zoomTextColorHover = 12303104;
        v2.__zoom_str = '';
        v2.__helpButtonBgColor = 0;
        v2.__helpButtonBgAlpha = 100;
        v2.__helpButtonTextColor = 16777215;
        v2.__helpButtonTextColorHover = 12303104;
        v2.__helpButton_str = '?';
        v2.__helpBalloonWidth = 300;
        v2.__helpBalloonBgColor = 0;
        v2.__helpBalloonBgAlpha = 100;
        v2.__helpBalloonTextColor = 16777215;
        v2.__area_depth = 0;
        v2.__bg_depth = 1;
        v2.__plotArea_depth = 100;
        v2.__gridX_depth = 200;
        v2.__gridL_depth = 300;
        v2.__gridR_depth = 400;
        v2.__valueL_depth = 500;
        v2.__valueR_depth = 600;
        v2.__axisX_depth = 700;
        v2.__axisL_depth = 800;
        v2.__axisR_depth = 900;
        v2.__graphs_depth = 1000;
        v2.__legend_depth = 1100;
        v2.__zoom_depth = 1200;
        v2.__labels_depth = 1300;
        v2.__helpButton_depth = 1400;
        v2.__helpBalloon_depth = 1500;
        v2.__indicator_depth = 1600;
        v2.__popUp_depth = 10000;
        v2.addProperty('OnOff', function () {}, v2.__set__OnOff);
        v2.addProperty('axisLAlpha', function () {}, v2.__set__axisLAlpha);
        v2.addProperty('axisLColor', function () {}, v2.__set__axisLColor);
        v2.addProperty('axisLTickLength', function () {}, v2.__set__axisLTickLength);
        v2.addProperty('axisLWidth', function () {}, v2.__set__axisLWidth);
        v2.addProperty('axisRAlpha', function () {}, v2.__set__axisRAlpha);
        v2.addProperty('axisRColor', function () {}, v2.__set__axisRColor);
        v2.addProperty('axisRTickLength', function () {}, v2.__set__axisRTickLength);
        v2.addProperty('axisRWidth', function () {}, v2.__set__axisRWidth);
        v2.addProperty('axisXAlpha', function () {}, v2.__set__axisXAlpha);
        v2.addProperty('axisXColor', function () {}, v2.__set__axisXColor);
        v2.addProperty('axisXTickLength', function () {}, v2.__set__axisXTickLength);
        v2.addProperty('axisXWidth', function () {}, v2.__set__axisXWidth);
        v2.addProperty('bgAlpha', function () {}, v2.__set__bgAlpha);
        v2.addProperty('bgColor', function () {}, v2.__set__bgColor);
        v2.addProperty('borderAlpha', function () {}, v2.__set__borderAlpha);
        v2.addProperty('borderColor', function () {}, v2.__set__borderColor);
        v2.addProperty('bottomMargin', function () {}, v2.__set__bottomMargin);
        v2.addProperty('connect', function () {}, v2.__set__connect);
        v2.addProperty('csvSeparator', function () {}, v2.__set__csvSeparator);
        v2.addProperty('dataProvider', function () {}, v2.__set__dataProvider);
        v2.addProperty('dataType', function () {}, v2.__set__dataType);
        v2.addProperty('graphSettings', function () {}, v2.__set__graphSettings);
        v2.addProperty('gridLAlpha', function () {}, v2.__set__gridLAlpha);
        v2.addProperty('gridLApproxCount', function () {}, v2.__set__gridLApproxCount);
        v2.addProperty('gridLColor', function () {}, v2.__set__gridLColor);
        v2.addProperty('gridLDashLength', function () {}, v2.__set__gridLDashLength);
        v2.addProperty('gridLDashed', function () {}, v2.__set__gridLDashed);
        v2.addProperty('gridRAlpha', function () {}, v2.__set__gridRAlpha);
        v2.addProperty('gridRApproxCount', function () {}, v2.__set__gridRApproxCount);
        v2.addProperty('gridRColor', function () {}, v2.__set__gridRColor);
        v2.addProperty('gridRDashLength', function () {}, v2.__set__gridRDashLength);
        v2.addProperty('gridRDashed', function () {}, v2.__set__gridRDashed);
        v2.addProperty('gridXAlpha', function () {}, v2.__set__gridXAlpha);
        v2.addProperty('gridXApproxCount', function () {}, v2.__set__gridXApproxCount);
        v2.addProperty('gridXColor', function () {}, v2.__set__gridXColor);
        v2.addProperty('gridXDashLength', function () {}, v2.__set__gridXDashLength);
        v2.addProperty('gridXDashed', function () {}, v2.__set__gridXDashed);
        v2.addProperty('height', function () {}, v2.__set__height);
        v2.addProperty('helpBalloonBgAlpha', function () {}, v2.__set__helpBalloonBgAlpha);
        v2.addProperty('helpBalloonBgColor', function () {}, v2.__set__helpBalloonBgColor);
        v2.addProperty('helpBalloonText', function () {}, v2.__set__helpBalloonText);
        v2.addProperty('helpBalloonTextColor', function () {}, v2.__set__helpBalloonTextColor);
        v2.addProperty('helpBalloonTextSize', function () {}, v2.__set__helpBalloonTextSize);
        v2.addProperty('helpBalloonWidth', function () {}, v2.__set__helpBalloonWidth);
        v2.addProperty('helpButtonBgAlpha', function () {}, v2.__set__helpButtonBgAlpha);
        v2.addProperty('helpButtonBgColor', function () {}, v2.__set__helpButtonBgColor);
        v2.addProperty('helpButtonText', function () {}, v2.__set__helpButtonText);
        v2.addProperty('helpButtonTextColor', function () {}, v2.__set__helpButtonTextColor);
        v2.addProperty('helpButtonTextColorHover', function () {}, v2.__set__helpButtonTextColorHover);
        v2.addProperty('helpButtonTextSize', function () {}, v2.__set__helpButtonTextSize);
        v2.addProperty('helpButtonX', function () {}, v2.__set__helpButtonX);
        v2.addProperty('helpButtonY', function () {}, v2.__set__helpButtonY);
        v2.addProperty('hideBulletsCount', function () {}, v2.__set__hideBulletsCount);
        v2.addProperty('indicatorLineAlpha', function () {}, v2.__set__indicatorLineAlpha);
        v2.addProperty('indicatorLineColor', function () {}, v2.__set__indicatorLineColor);
        v2.addProperty('indicatorSelectionAlpha', function () {}, v2.__set__indicatorSelectionAlpha);
        v2.addProperty('indicatorSelectionColor', function () {}, v2.__set__indicatorSelectionColor);
        v2.addProperty('leftMargin', function () {}, v2.__set__leftMargin);
        v2.addProperty('legendBgAlpha', function () {}, v2.__set__legendBgAlpha);
        v2.addProperty('legendBgColor', function () {}, v2.__set__legendBgColor);
        v2.addProperty('legendBorderAlpha', function () {}, v2.__set__legendBorderAlpha);
        v2.addProperty('legendBorderColor', function () {}, v2.__set__legendBorderColor);
        v2.addProperty('legendKeyBorderColor', function () {}, v2.__set__legendKeyBorderColor);
        v2.addProperty('legendKeyMarkColor', function () {}, v2.__set__legendKeyMarkColor);
        v2.addProperty('legendKeySize', function () {}, v2.__set__legendKeySize);
        v2.addProperty('legendMargins', function () {}, v2.__set__legendMargins);
        v2.addProperty('legendSpacing', function () {}, v2.__set__legendSpacing);
        v2.addProperty('legendTextColor', function () {}, v2.__set__legendTextColor);
        v2.addProperty('legendTextColorHover', function () {}, v2.__set__legendTextColorHover);
        v2.addProperty('legendTextSize', function () {}, v2.__set__legendTextSize);
        v2.addProperty('legendWidth', function () {}, v2.__set__legendWidth);
        v2.addProperty('legendX', function () {}, v2.__set__legendX);
        v2.addProperty('legendY', function () {}, v2.__set__legendY);
        v2.addProperty('maxLeft', function () {}, v2.__set__maxLeft);
        v2.addProperty('maxRight', function () {}, v2.__set__maxRight);
        v2.addProperty('minLeft', function () {}, v2.__set__minLeft);
        v2.addProperty('minRight', function () {}, v2.__set__minRight);
        v2.addProperty('noDataText', function () {}, v2.__set__noDataText);
        v2.addProperty('path', function () {}, v2.__set__path);
        v2.addProperty('plotAreaAlpha', function () {}, v2.__set__plotAreaAlpha);
        v2.addProperty('plotAreaColor', function () {}, v2.__set__plotAreaColor);
        v2.addProperty('redraw', function () {}, v2.__set__redraw);
        v2.addProperty('rightMargin', function () {}, v2.__set__rightMargin);
        v2.addProperty('showIndicator', function () {}, v2.__set__showIndicator);
        v2.addProperty('showLegend', function () {}, v2.__set__showLegend);
        v2.addProperty('topMargin', function () {}, v2.__set__topMargin);
        v2.addProperty('valueLColor', function () {}, v2.__set__valueLColor);
        v2.addProperty('valueLEnabled', function () {}, v2.__set__valueLEnabled);
        v2.addProperty('valueLFreq', function () {}, v2.__set__valueLFreq);
        v2.addProperty('valueLSkipFirst', function () {}, v2.__set__valueLSkipFirst);
        v2.addProperty('valueLSkipLast', function () {}, v2.__set__valueLSkipLast);
        v2.addProperty('valueLTextSize', function () {}, v2.__set__valueLTextSize);
        v2.addProperty('valueLUnit', function () {}, v2.__set__valueLUnit);
        v2.addProperty('valueLUnitPosition', function () {}, v2.__set__valueLUnitPosition);
        v2.addProperty('valueRColor', function () {}, v2.__set__valueRColor);
        v2.addProperty('valueREnabled', function () {}, v2.__set__valueREnabled);
        v2.addProperty('valueRFreq', function () {}, v2.__set__valueRFreq);
        v2.addProperty('valueRSkipFirst', function () {}, v2.__set__valueRSkipFirst);
        v2.addProperty('valueRSkipLast', function () {}, v2.__set__valueRSkipLast);
        v2.addProperty('valueRTextSize', function () {}, v2.__set__valueRTextSize);
        v2.addProperty('valueRUnit', function () {}, v2.__set__valueRUnit);
        v2.addProperty('valueRUnitPosition', function () {}, v2.__set__valueRUnitPosition);
        v2.addProperty('valueXColor', function () {}, v2.__set__valueXColor);
        v2.addProperty('valueXEnabled', function () {}, v2.__set__valueXEnabled);
        v2.addProperty('valueXFreq', function () {}, v2.__set__valueXFreq);
        v2.addProperty('valueXSkipFirst', function () {}, v2.__set__valueXSkipFirst);
        v2.addProperty('valueXSkipLast', function () {}, v2.__set__valueXSkipLast);
        v2.addProperty('valueXTextSize', function () {}, v2.__set__valueXTextSize);
        v2.addProperty('width', function () {}, v2.__set__width);
        v2.addProperty('xBalloonEnabled', function () {}, v2.__set__xBalloonEnabled);
        v2.addProperty('xBalloonTextColor', function () {}, v2.__set__xBalloonTextColor);
        v2.addProperty('yBalloonOnOff', function () {}, v2.__set__yBalloonOnOff);
        v2.addProperty('zoomBgAlpha', function () {}, v2.__set__zoomBgAlpha);
        v2.addProperty('zoomBgColor', function () {}, v2.__set__zoomBgColor);
        v2.addProperty('zoomText', function () {}, v2.__set__zoomText);
        v2.addProperty('zoomTextColor', function () {}, v2.__set__zoomTextColor);
        v2.addProperty('zoomTextColorHover', function () {}, v2.__set__zoomTextColorHover);
        v2.addProperty('zoomTextSize', function () {}, v2.__set__zoomTextSize);
        v2.addProperty('zoomX', function () {}, v2.__set__zoomX);
        v2.addProperty('zoomY', function () {}, v2.__set__zoomY);
        v2.addProperty('zoomable', function () {}, v2.__set__zoomable);
        ASSetPropFlags(com.amcharts.LineChart.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 21 __Packages.com.amcharts.Line {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Line) {
        var v1 = function (target_mc, name, depth, x, y, width, color, alpha) {
          if (alpha == undefined) {
            alpha = 100;
          }
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__mc.lineStyle(width, color, alpha);
          this.__mc.moveTo(x[0], y[0]);
          var v2 = 1;
          while (v2 < x.length) {
            this.__mc.lineTo(x[v2], y[v2]);
            ++v2;
          }
        };

        com.amcharts.Line = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.Line.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 22 __Packages.com.amcharts.CloneObject {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.CloneObject) {
        var v1 = function () {};

        com.amcharts.CloneObject = v1;
        var v2 = v1.prototype;
        v1.clone = function (obj) {
          if (obj instanceof Array) {
            var v2 = new Array();
            var v3 = 0;
            while (v3 < obj.length) {
              if (typeof obj[v3] == 'object') {
                v2[v3] = com.amcharts.CloneObject.clone(obj[v3]);
              } else {
                v2[v3] = obj[v3];
              }
              ++v3;
            }
            return v2;
          }
          if (obj instanceof XML || obj instanceof MovieClip) {
            v2 = null;
            trace('Warning! CloneObject can not be used on MovieClip or XML objects');
            return v2;
          }
          v2 = new Object();
          for (v3 in obj) {
            if (typeof obj[v3] == 'object') {
              v2[v3] = com.amcharts.CloneObject.clone(obj[v3]);
              continue;
            }
            v2[v3] = obj[v3];
          }
          return v2;
        };

        ASSetPropFlags(com.amcharts.CloneObject.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 23 __Packages.com.amcharts.MinMax {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.MinMax) {
        var v1 = function () {};

        com.amcharts.MinMax = v1;
        var v2 = v1.prototype;
        v1.calculate = function (minD, maxD, startCount, endCount, yAxis_obj, gridCount, axis) {
          var v1 = com.amcharts.MinMax.getMax(yAxis_obj, axis);
          if (isNaN(maxD) == false && maxD >= v1) {
            v1 = maxD;
          }
          var v2 = com.amcharts.MinMax.getMin(yAxis_obj, axis);
          if (isNaN(minD) == false && minD <= v2) {
            v2 = minD;
          }
          if (v2 == 0 && v1 == 0) {
            v1 = 9;
          }
          var v10 = v2;
          var v11 = v1;
          var v6 = v1 - v2;
          var v3;
          if (v6 == 0) {
            v3 = Math.pow(10, Math.floor(Math.log(Math.abs(v1)) * 0.4342945)) / 10;
          } else {
            v3 = Math.pow(10, Math.floor(Math.log(Math.abs(v6)) * 0.4342945)) / 10;
          }
          if (isNaN(maxD) == true) {
            v1 = Math.ceil(v1 / v3) * v3 + v3;
          }
          if (isNaN(minD) == true) {
            v2 = Math.floor(v2 / v3) * v3 - v3;
          }
          v6 = v1 - v2;
          v3 = Math.pow(10, Math.floor(Math.log(Math.abs(v6)) * 0.4342945)) / 10;
          var v4 = Math.ceil(v6 / gridCount / v3) * v3;
          var v7 = Math.pow(10, Math.floor(Math.log(Math.abs(v4)) * 0.4342945));
          var v5 = Math.ceil(v4 / v7);
          if (v5 > 5) {
            v5 = 10;
          }
          if (v5 <= 5 && v5 > 2) {
            v5 = 5;
          }
          v4 = Math.ceil(v4 / v7 * v5) * v7 * v5;
          v2 = v4 * Math.floor(v2 / v4);
          v1 = v4 * Math.ceil(v1 / v4);
          if (v2 < 0 && v10 >= 0) {
            v2 = 0;
          }
          if (v1 > 0 && v11 <= 0) {
            v1 = 0;
          }
          return [v2, v1, v4];
        };

        v1.getMax = function (obj, axis) {
          var v4 = -Number.MAX_VALUE;
          var v2 = 0;
          while (v2 < obj.graph.length) {
            if (obj.graph[v2].axis == axis) {
              var v1 = 0;
              while (v1 < obj.graph[v2].value.length) {
                if (obj.graph[v2].value[v1].value > v4) {
                  v4 = obj.graph[v2].value[v1].value;
                }
                ++v1;
              }
            }
            ++v2;
          }
          return v4;
        };

        v1.getMin = function (obj, axis) {
          var v4 = Number.MAX_VALUE;
          var v2 = 0;
          while (v2 < obj.graph.length) {
            if (obj.graph[v2].axis == axis) {
              var v1 = 0;
              while (v1 < obj.graph[v2].value.length) {
                if (obj.graph[v2].value[v1].value < v4) {
                  v4 = obj.graph[v2].value[v1].value;
                }
                ++v1;
              }
            }
            ++v2;
          }
          return v4;
        };

        ASSetPropFlags(com.amcharts.MinMax.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 24 __Packages.com.amcharts.GridY {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.GridY) {
        var v1 = function (target_mc, name, depth, width, height, min, max, step, dashed, dashLenght, color, alpha) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          var v10 = Math.round((max - min) / step) + 1;
          var v3 = height / (v10 - 1);
          var v2 = 0;
          while (v2 < v10) {
            var v4 = min + v2 * step;
            if (v4 == 0) {
              var v6 = alpha * 3;
            } else {
              var v6 = alpha;
            }
            if (dashed == true && v4 != 0) {
              var v5 = new com.amcharts.DashedLine(this.__mc, 'grid_mc' + v2, v2, [0, width], [-v3 * v2, -v3 * v2], 0, dashLenght, color);
            } else {
              var v5 = new com.amcharts.Line(this.__mc, 'grid_mc' + v2, v2, [0, width], [-v3 * v2, -v3 * v2], 0, color);
            }
            v5.mc._alpha = v6;
            ++v2;
          }
        };

        com.amcharts.GridY = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.GridY.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 25 __Packages.com.amcharts.DashedLine {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.DashedLine) {
        var v1 = function (target_mc, name, depth, x, y, width, dashLength, color) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          var v3 = 1;
          while (v3 < x.length) {
            var v5 = this.__mc.createEmptyMovieClip('dashedLine', v3);
            v5._x = x[v3 - 1];
            v5._y = y[v3 - 1];
            var v4 = Math.sqrt(Math.pow(x[v3] - x[v3 - 1], 2) + Math.pow(y[v3] - y[v3 - 1], 2)) / dashLength;
            var v6 = (x[v3] - x[v3 - 1]) / v4;
            var v7 = (y[v3] - y[v3 - 1]) / v4;
            var v2 = 1;
            while (v2 < v4) {
              var v10 = new com.amcharts.Line(v5, 'line' + v2, v2, [(v2 - 1) * v6, v2 * v6], [(v2 - 1) * v7, v2 * v7], width, color);
              v2 += 2;
            }
            ++v3;
          }
        };

        com.amcharts.DashedLine = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.DashedLine.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 26 __Packages.com.amcharts.ValuesY {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.ValuesY) {
        var v1 = function (target_mc, height, min, max, step, freq, align, textWidth, skipFirst, skipLast, color, size, unit, unitPosition) {
          this.__values_mc = target_mc.createEmptyMovieClip('values_mc', 0);
          this.__ticks_mc = target_mc.createEmptyMovieClip('ticks_mc', 1);
          this.__freq = freq;
          this.__align = align;
          this.__textWidth = textWidth;
          var v13 = Math.round((max - min) / step) + 1;
          this.__gridInterval = height / (v13 - 1);
          if (skipFirst == true) {
            this.__startCount = 1;
          } else {
            this.__startCount = 0;
          }
          if (skipLast == true) {
            this.__endCount = v13 - 1;
          } else {
            this.__endCount = v13;
          }
          if (this.__align == 'right') {
            var v6 = 9;
          } else {
            var v6 = 0;
          }
          var v3 = this.__startCount;
          while (v3 < this.__endCount) {
            var v4 = com.amcharts.Utils.formatNumber(min + v3 * step);
            if (unitPosition == 'right' && unit != undefined) {
              v4 += unit;
            } else {
              v4 = unit + v4;
            }
            var v2 = new com.amcharts.Text(this.__values_mc, 'value' + v3, v3, v6, -this.__gridInterval * v3, textWidth);
            v2.__set__color(color);
            v2.__set__size(size);
            v2.__set__align(this.__align);
            v2.__set__htmlTxt(v4);
            v2.__set__y(v2.__get__y() - v2.__get__textHeight() / 2 - 3);
            v3 += this.__freq;
          }
        };

        com.amcharts.ValuesY = v1;
        var v2 = v1.prototype;
        v2.ticks = function (color, alpha, length) {
          var v2 = this.__startCount;
          while (v2 < this.__endCount) {
            if (length > 0 && alpha > 0) {
              var v3 = new com.amcharts.Line(this.__ticks_mc, 'tick_mc' + v2, v2, [0, length], [0, 0], 0, color);
              v3.mc._alpha = alpha;
              v3.mc._y = -this.__gridInterval * v2;
              if (this.__align == 'right') {
                v3.mc._x = this.__textWidth;
              } else {
                v3.mc._x = 0;
              }
            }
            if (this.__align == 'right') {
              this.__values_mc._x = -length - 2;
            } else {
              this.__values_mc._x = length;
            }
            v2 += this.__freq;
          }
        };

        ASSetPropFlags(com.amcharts.ValuesY.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 27 __Packages.com.amcharts.GridX {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.GridX) {
        var v1 = function (target_mc, name, depth, data_obj, gridCount, width, height, dashed, dashLength, color, alpha) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__width = width;
          this.__height = height;
          this.__dashed = dashed;
          this.__dashLength = dashLength;
          this.__color = color;
          this.__grid_mc = this.__mc.createEmptyMovieClip('grid_mc', 0);
          this.__grid_mc._alpha = alpha;
          this.__values_mc = this.__mc.createEmptyMovieClip('values_mc', 1);
          this.__ticks_mc = this.__mc.createEmptyMovieClip('ticks_mc', 2);
          this.__data_obj = data_obj;
          this.__gridCount = gridCount;
        };

        com.amcharts.GridX = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          var v7 = this.__data_obj.value.length;
          if (v7 < this.__gridCount) {
            this.__gridCount = v7;
          }
          var v6 = Math.floor(v7 / this.__gridCount);
          var v4 = this.__width / (this.__data_obj.value.length - 1);
          var v2 = 0;
          while (v2 < v7) {
            if (this.__dashed == true) {
              new com.amcharts.DashedLine(this.__grid_mc, 'grid_mc' + v2, v2, [v4 * v2, v4 * v2], [0, -this.__height], 0, this.__dashLength, this.__color);
            } else {
              new com.amcharts.Line(this.__grid_mc, 'grid_mc' + v2, v2, [v4 * v2, v4 * v2], [0, -this.__height], 0, this.__color);
            }
            v2 += v6;
          }
          if (this.__skipFirst == true) {
            var v9 = v6;
          } else {
            var v9 = 0;
          }
          if (this.__skipLast == true) {
            var v8 = v7 - v6;
          } else {
            var v8 = v7;
          }
          if (this.__valuesEnabled == true) {
            v2 = v9;
            while (v2 < v8) {
              var v3 = new com.amcharts.Text(this.__values_mc, 'value' + v2, v2, v4 * v2, this.__tickLength + 2, v4 * v6 * this.__valueFreq);
              v3.__set__txt(this.__data_obj.value[v2].value);
              v3.__set__size(this.__valueSize);
              v3.__set__color(this.__valueColor);
              v3.__set__x(Math.round(v3.__get__x()) - v3.__get__textWidth() / 2 - 2);
              if (this.__tickLength > 0 && this.__tickAlpha > 0) {
                var v5 = new com.amcharts.Line(this.__ticks_mc, 'dot_mc' + v2, v2, [0, 0], [0, this.__tickLength], 0, this.__tickColor);
                v5.mc._alpha = this.__tickAlpha;
                v5.mc._x = v4 * v2;
              }
              v2 += v6 * this.__valueFreq;
            }
          }
        };

        v2.values = function (freq, skipFirst, skipLast, color, size) {
          this.__valuesEnabled = true;
          this.__valueFreq = freq;
          this.__skipFirst = skipFirst;
          this.__skipLast = skipLast;
          this.__valueColor = color;
          this.__valueSize = size;
        };

        v2.ticks = function (color, alpha, length) {
          this.__tickColor = color;
          this.__tickAlpha = alpha;
          this.__tickLength = length;
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.show = function () {
          this.__init();
        };

        v2.__valueFreq = 1;
        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.GridX.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 28 __Packages.com.amcharts.Indicator {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Indicator) {
        var v1 = function (parent, target_mc, width, height, dotLength, data_obj, area_mc) {
          this.__area_mc = area_mc;
          this.__parent = parent;
          this.__target_mc = target_mc;
          this.__height = height;
          this.__width = width;
          this.__dotLength = dotLength;
          this.__data_obj = data_obj;
        };

        com.amcharts.Indicator = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          var main_obj = this;
          this.__count = this.__data_obj.xaxis.value.length;
          this.__stepWidth = this.__width / (this.__count - 1);
          var v4 = new com.amcharts.Rectangle(this.__target_mc, 'selection_mc', 50, this.__width, this.__height, this.__selectionColor);
          this.__selection_mc = v4.mc;
          this.__selection_mc._alpha = this.__selectionAlpha;
          this.__selection_mc._visible = false;
          var v3 = new com.amcharts.Line(this.__target_mc, 'line_mc', 100, [0, 0], [0, this.__height], 0, this.__lineColor);
          this.__line_mc = v3.mc;
          this.__line_mc._alpha = this.__lineAlpha;
          this.__line_mc._visible = false;
          this.__yBalloons_mc = this.__target_mc.createEmptyMovieClip('yBalloons_mc', 200);
          this.__mouseListener = new Object();
          this.__mouseListener.onMouseMove = function () {
            main_obj.__updatePosition(main_obj.__target_mc._xmouse);
            updateAfterEvent();
          };

          if (this.__zoomable == true) {
            this.__mouseListener.onMouseDown = function () {
              if (main_obj.__area_mc.hitTest(_root._xmouse, _root._ymouse, true) == true) {
                main_obj.__selectionX = main_obj.__x;
                main_obj.__selection_mc._x = main_obj.__selectionX;
                main_obj.__selection_mc._width = 0;
                main_obj.__selection_mc._visible = true;
                main_obj.__start = Math.round(main_obj.__selectionX / main_obj.__stepWidth);
                main_obj.__isSelecting = true;
              }
            };

            this.__mouseListener.onMouseUp = function () {
              if (main_obj.__isSelecting == true) {
                main_obj.__isSelecting = false;
                main_obj.__selection_mc._visible = false;
                main_obj.__end = Math.round(main_obj.__x / main_obj.__stepWidth);
                main_obj.__makeZoom();
              }
            };

          }
          Mouse.addListener(this.__mouseListener);
          this.__updatePosition(this.__target_mc._xmouse);
        };

        v2.__updatePosition = function (x) {
          if (this.__area_mc.hitTest(_root._xmouse, _root._ymouse, true) == true) {
            this.__line_mc._visible = true;
            this.__xBalloon_mc._visible = true;
            this.__yBalloons_mc._visible = true;
            var v6 = Math.round(x / this.__stepWidth);
            this.__x = v6 * this.__stepWidth;
            if (this.__x != this.__oldX) {
              if (this.__xBalloonEnabled == true) {
                var v7 = new com.amcharts.Balloon(this.__target_mc, 'xBalloon', 150, this.__data_obj.xaxis.value[v6].value, -this.__lMargin, this.__height, this.__width + this.__rMargin, this.__height + this.__bMargin, this.__width);
                v7.pointTo(this.__x, this.__height + 1);
                v7.distance = this.__dotLength;
                v7.hMargins = 8;
                v7.pointerWidth = 16;
                v7.vMargins = 1;
                v7.borderColor = this.__xBalloonColor;
                v7.bgColor = v7.borderColor;
                v7.textColor = this.__xBalloonTextColor;
                v7.textSize = this.__xBalloonTextSize;
                v7.show();
                this.__xBalloon_mc = v7.mc;
              }
              var v3 = 0;
              while (v3 < this.__data_obj.graphs.graph.length) {
                if (this.__data_obj.graphs.graph[v3].value[v6].value != null) {
                  var v5 = '<b>' + com.amcharts.Utils.formatNumber(this.__data_obj.graphs.graph[v3].value[v6].value) + '</b>';
                  if (this.__data_obj.graphs.graph[v3].unit != undefined) {
                    if (this.__data_obj.graphs.graph[v3].unit_position == 'left') {
                      v5 = '<b>' + this.__data_obj.graphs.graph[v3].unit + '</b>' + v5;
                    } else {
                      v5 = v5 + '<b>' + this.__data_obj.graphs.graph[v3].unit + '</b>';
                    }
                  }
                  if (this.__data_obj.graphs.graph[v3].value[v6].description != undefined) {
                    v5 = v5 + '\n' + this.__data_obj.graphs.graph[v3].value[v6].description;
                  }
                  if (this.__yBalloonVisible[v3] == true) {
                    var v4 = new com.amcharts.Balloon(this.__yBalloons_mc, 'yBalloon' + v3, this.__data_obj.graphs.graph.length - v3, v5, 0, 0, this.__width, this.__height, this.__width / 2);
                    v4.pointTo(this.__x, this.__yBalloonY[v3].y[v6] + this.__height);
                    v4.distance = 7;
                    v4.hMargins = 8;
                    v4.bMargins = 5;
                    v4.pointerWidth = 16;
                    v4.vMargins = 3;
                    v4.pointerPosition = 'horizontal';
                    v4.borderColor = this.__data_obj.graphs.graph[v3].balloonColor;
                    v4.bgColor = v4.borderColor;
                    v4.textColor = this.__data_obj.graphs.graph[v3].balloonTextColor;
                    v4.show();
                    this.__yBalloon_mc[v3] = v4.mc;
                  }
                } else {
                  this.__yBalloon_mc[v3]._visible = false;
                }
                ++v3;
              }
              this.__line_mc._x = this.__x;
              if (this.__isSelecting == true) {
                if (this.__selectionX > this.__x) {
                  this.__selection_mc._x = this.__x;
                  this.__selection_mc._width = this.__selectionX - this.__x;
                }
                if (this.__selectionX < this.__x) {
                  this.__selection_mc._x = this.__selectionX;
                  this.__selection_mc._width = this.__x - this.__selectionX;
                }
                if (this.__selectionX == this.__x) {
                  this.__selection_mc._x = this.__x;
                  this.__selection_mc._width = 0;
                }
              }
            }
            this.__oldX = this.__x;
          } else {
            this.__line_mc._visible = false;
            this.__xBalloon_mc._visible = false;
            this.__yBalloons_mc._visible = false;
          }
        };

        v2.__makeZoom = function () {
          if (this.__start > this.__end) {
            var v2 = this.__start;
            this.__start = this.__end;
            this.__end = v2;
          }
          if (this.__start < 0) {
            this.__start = 0;
          }
          if (this.__end > this.__count) {
            this.__end = this.__count;
          }
          if (this.__start != this.__end && isNaN(this.__start) == false && isNaN(this.__end) == false) {
            this.__parent.makeZoom(this.__start, this.__end + 1);
          }
        };

        v2.yBalloon = function (id, y) {
          this.__yBalloonY[id] = new Object();
          this.__yBalloonY[id].y = y;
        };

        v2.show = function () {
          this.__init();
        };

        v2.hideYBalloon = function (param) {
          this.__yBalloonVisible[param] = false;
          this.__yBalloon_mc[param]._visible = false;
        };

        v2.showYBalloon = function (param) {
          this.__yBalloonVisible[param] = true;
          this.__oldX = null;
          this.__updatePosition(this.__target_mc._xmouse);
        };

        v2.__set__lineColor = function (param) {
          this.__lineColor = param;
          null;
          null;
          return this.__get__lineColor();
        };

        v2.__set__lineAlpha = function (param) {
          this.__lineAlpha = param;
          null;
          null;
          return this.__get__lineAlpha();
        };

        v2.__set__selectionColor = function (param) {
          this.__selectionColor = param;
          null;
          null;
          return this.__get__selectionColor();
        };

        v2.__set__selectionAlpha = function (param) {
          this.__selectionAlpha = param;
          null;
          null;
          return this.__get__selectionAlpha();
        };

        v2.__set__zoomable = function (param) {
          this.__zoomable = param;
          null;
          null;
          return this.__get__zoomable();
        };

        v2.__set__xBalloonEnabled = function (param) {
          this.__xBalloonEnabled = param;
          null;
          null;
          return this.__get__xBalloonEnabled();
        };

        v2.__set__xBalloonColor = function (param) {
          this.__xBalloonColor = param;
          null;
          null;
          return this.__get__xBalloonColor();
        };

        v2.__set__xBalloonTextColor = function (param) {
          this.__xBalloonTextColor = param;
          null;
          null;
          return this.__get__xBalloonTextColor();
        };

        v2.__set__xBalloonTextSize = function (param) {
          this.__xBalloonTextSize = param;
          null;
          null;
          return this.__get__xBalloonTextSize();
        };

        v2.setMargins = function (l, t, r, b) {
          this.__lMargin = l;
          this.__tMargin = t;
          this.__rMargin = r;
          this.__bMargin = b;
        };

        v2.remove = function () {
          Mouse.removeListener(this.__mouseListener);
        };

        v2.__yBalloonY = new Array();
        v2.__yBalloonVisible = new Array();
        v2.__yBalloon_mc = new Array();
        v2.__isSelecting = false;
        v2.addProperty('lineAlpha', function () {}, v2.__set__lineAlpha);
        v2.addProperty('lineColor', function () {}, v2.__set__lineColor);
        v2.addProperty('selectionAlpha', function () {}, v2.__set__selectionAlpha);
        v2.addProperty('selectionColor', function () {}, v2.__set__selectionColor);
        v2.addProperty('xBalloonColor', function () {}, v2.__set__xBalloonColor);
        v2.addProperty('xBalloonEnabled', function () {}, v2.__set__xBalloonEnabled);
        v2.addProperty('xBalloonTextColor', function () {}, v2.__set__xBalloonTextColor);
        v2.addProperty('xBalloonTextSize', function () {}, v2.__set__xBalloonTextSize);
        v2.addProperty('zoomable', function () {}, v2.__set__zoomable);
        ASSetPropFlags(com.amcharts.Indicator.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 29 __Packages.com.amcharts.Balloon {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Balloon) {
        var v1 = function (target_mc, name, depth, text, l, t, r, b, maxWidth) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__text = text;
          this.__l = l;
          this.__r = r;
          this.__t = t;
          this.__b = b;
          this.__maxWidth = maxWidth || this.__maxWidth;
        };

        com.amcharts.Balloon = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          this.__textWidth = this.__maxWidth - this.__hMargins * 2 - this.__distance;
          this.__textField = new com.amcharts.Text(this.__mc, 'textField', 10, 0, 0, this.__textWidth);
          this.__textField.__set__color(this.__textColor);
          this.__textField.__set__size(this.__textSize);
          this.__textField.__set__htmlTxt(this.__text);
          if (this.__textField.__get__textWidth() < this.__textWidth) {
            this.__textField.__set__width(this.__textField.__get__textWidth() + 5);
          }
          this.__textWidth = this.__textField.width;
          this.__textHeight = this.__textField.height;
          this.__build();
        };

        v2.__build = function () {
          var v7 = new Array();
          var v6 = new Array();
          if (this.__pointerPos == 'horizontal') {
            this.__textField.__set__y(this.__y - this.__textHeight / 2);
            if (this.__by != undefined) {
              this.__textField.__set__y(this.__by + this.__vMargins);
            }
            if (this.__bx != undefined) {
              this.__textField.__set__x(this.__bx + this.__hMargins);
            }
            if (this.__textField.__get__y() < this.__t + this.__bMargins + this.__vMargins) {
              this.__textField.__set__y(this.__t + this.__bMargins + this.__vMargins);
            }
            if (this.__textField.__get__y() + this.__textHeight > this.__b - this.__bMargins - this.__vMargins) {
              this.__textField.__set__y(this.__b - this.__bMargins - this.__textHeight - this.__vMargins);
            }
            var v3 = this.__y - this.__pwidth / 2;
            if (v3 < this.__textField.__get__y() - this.__vMargins) {
              v3 = this.__textField.__get__y() - this.__vMargins;
            }
            if (v3 > this.__textField.__get__y() + this.__vMargins + this.__textHeight - this.__pwidth) {
              v3 = this.__textField.__get__y() + this.__vMargins + this.__textHeight - this.__pwidth;
            }
            var v2 = this.__y + this.__pwidth / 2;
            if (v2 > this.__textField.__get__y() + this.__vMargins + this.__textHeight) {
              v2 = this.__textField.__get__y() + this.__vMargins + this.__textHeight;
            }
            if (v2 < this.__textField.__get__y() - this.__vMargins + this.__pwidth) {
              v2 = this.__textField.__get__y() - this.__vMargins + this.__pwidth;
            }
            if (this.__x >= (this.__r - this.__l) / 2 + this.__l) {
              if (this.__bx == undefined) {
                this.__textField.__set__x(this.__x - (this.__textWidth + this.__hMargins + this.__distance));
              }
              v7 = [this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() + this.__hMargins + this.__textWidth, this.__textField.__get__x() + this.__hMargins + this.__textWidth, this.__x, this.__textField.__get__x() + this.__hMargins + this.__textWidth, this.__textField.__get__x() + this.__hMargins + this.__textWidth, this.__textField.__get__x() - this.__hMargins];
              v6 = [this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() - this.__vMargins, v3, this.__y, v2, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() - this.__vMargins];
            } else {
              if (this.__bx == undefined) {
                this.__textField.__set__x(this.__x + this.__hMargins + this.__distance);
              }
              v7 = [this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() + this.__textWidth + this.__hMargins, this.__textField.__get__x() + this.__textWidth + this.__hMargins, this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() - this.__hMargins, this.__x, this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() - this.__hMargins];
              v6 = [this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() + this.__textHeight + this.__vMargins, this.__textField.__get__y() + this.__textHeight + this.__vMargins, v2, this.__y, v3, this.__textField.__get__y() - this.__vMargins];
            }
          }
          if (this.__pointerPos == 'vertical') {
            this.__textField.__set__x(this.__x - this.__textWidth / 2);
            if (this.__by != undefined) {
              this.__textField.__set__y(this.__by + this.__vMargins);
            }
            if (this.__bx != undefined) {
              this.__textField.__set__x(this.__bx + this.__hMargins);
            }
            if (this.__textField.__get__x() < this.__l + this.__bMargins + this.__hMargins) {
              this.__textField.__set__x(this.__l + this.__bMargins + this.__hMargins);
            }
            if (this.__textField.__get__x() + this.__textWidth > this.__r - this.__bMargins - this.__hMargins) {
              this.__textField.__set__x(this.__r - this.__bMargins - this.__textWidth - this.__hMargins);
            }
            var v5 = this.__x - this.__pwidth / 2;
            if (v5 < this.__textField.__get__x() - this.__hMargins) {
              v5 = this.__textField.__get__x() - this.__hMargins;
            }
            if (v5 > this.__textField.__get__x() + this.__hMargins + this.__textWidth - this.__pwidth) {
              v5 = this.__textField.__get__x() + this.__hMargins + this.__textWidth - this.__pwidth;
            }
            var v4 = this.__x + this.__pwidth / 2;
            if (v4 > this.__textField.__get__x() + this.__hMargins + this.__textWidth) {
              v4 = this.__textField.__get__x() + this.__hMargins + this.__textWidth;
            }
            if (v4 < this.__textField.__get__x() - this.__hMargins + this.__pwidth) {
              v4 = this.__textField.__get__x() - this.__hMargins + this.__pwidth;
            }
            if (this.__y >= (this.__b - this.__t) / 2 + this.__t) {
              if (this.__by == undefined) {
                this.__textField.__set__y(this.__y - (this.__textHeight + this.__vMargins + this.__distance));
              }
              v7 = [this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() + this.__textWidth + this.__hMargins, this.__textField.__get__x() + this.__textWidth + this.__hMargins, v4, this.__x, v5, this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() - this.__hMargins];
              v6 = [this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__y, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() - this.__vMargins];
            } else {
              if (this.__by == undefined) {
                this.__textField.__set__y(this.__y + this.__vMargins + this.__distance);
              }
              v7 = [this.__textField.__get__x() - this.__hMargins, v5, this.__x, v4, this.__textField.__get__x() + this.__textWidth + this.__hMargins, this.__textField.__get__x() + this.__textWidth + this.__hMargins, this.__textField.__get__x() - this.__hMargins, this.__textField.__get__x() - this.__hMargins];
              v6 = [this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() - this.__vMargins, this.__y, this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() - this.__vMargins, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() + this.__vMargins + this.__textHeight, this.__textField.__get__y() - this.__vMargins];
            }
          }
          var v8 = new com.amcharts.Shape(this.__mc, 'bg', 0, v7, v6, this.__bgColor, this.__borderWidth, this.__borderColor, this.__bgAlpha, this.__borderAlpha);
        };

        v2.pointTo = function (x, y) {
          this.__x = x;
          this.__y = y;
        };

        v2.show = function () {
          this.__init();
        };

        v2.__set__pointerPosition = function (param) {
          this.__pointerPos = param;
          null;
          null;
          return this.__get__pointerPosition();
        };

        v2.__set__distance = function (param) {
          this.__distance = param;
          null;
          null;
          return this.__get__distance();
        };

        v2.__set__pointerWidth = function (param) {
          this.__pwidth = param;
          null;
          null;
          return this.__get__pointerWidth();
        };

        v2.__set__boxX = function (param) {
          this.__bx = param;
          null;
          null;
          return this.__get__boxX();
        };

        v2.__set__boxY = function (param) {
          this.__by = param;
          null;
          null;
          return this.__get__boxY();
        };

        v2.__set__textColor = function (param) {
          this.__textColor = param;
          null;
          null;
          return this.__get__textColor();
        };

        v2.__set__textSize = function (param) {
          this.__textSize = param;
          null;
          null;
          return this.__get__textSize();
        };

        v2.__set__font = function (param) {
          this.__font = param;
          null;
          null;
          return this.__get__font();
        };

        v2.__set__bgColor = function (param) {
          this.__bgColor = param;
          null;
          null;
          return this.__get__bgColor();
        };

        v2.__set__bgAlpha = function (param) {
          this.__bgAlpha = param;
          null;
          null;
          return this.__get__bgAlpha();
        };

        v2.__set__borderWidth = function (param) {
          this.__borderWidth = param;
          null;
          null;
          return this.__get__borderWidth();
        };

        v2.__set__borderColor = function (param) {
          this.__borderColor = param;
          null;
          null;
          return this.__get__borderColor();
        };

        v2.__set__borderAlpha = function (param) {
          this.__borderAlpha = param;
          null;
          null;
          return this.__get__borderAlpha();
        };

        v2.__set__vMargins = function (param) {
          this.__vMargins = param;
          null;
          null;
          return this.__get__vMargins();
        };

        v2.__set__hMargins = function (param) {
          this.__hMargins = param;
          null;
          null;
          return this.__get__hMargins();
        };

        v2.__set__bMargins = function (param) {
          this.__bMargins = param;
          null;
          null;
          return this.__get__bMargins();
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.__pointerPos = 'vertical';
        v2.__maxWidth = 200;
        v2.__distance = 15;
        v2.__pwidth = 26;
        v2.__bgColor = 16777215;
        v2.__bgAlpha = 100;
        v2.__borderWidth = 0;
        v2.__borderColor = 16763904;
        v2.__borderAlpha = 100;
        v2.__vMargins = 10;
        v2.__hMargins = 10;
        v2.__bMargins = 0;
        v2.addProperty('bMargins', function () {}, v2.__set__bMargins);
        v2.addProperty('bgAlpha', function () {}, v2.__set__bgAlpha);
        v2.addProperty('bgColor', function () {}, v2.__set__bgColor);
        v2.addProperty('borderAlpha', function () {}, v2.__set__borderAlpha);
        v2.addProperty('borderColor', function () {}, v2.__set__borderColor);
        v2.addProperty('borderWidth', function () {}, v2.__set__borderWidth);
        v2.addProperty('boxX', function () {}, v2.__set__boxX);
        v2.addProperty('boxY', function () {}, v2.__set__boxY);
        v2.addProperty('distance', function () {}, v2.__set__distance);
        v2.addProperty('font', function () {}, v2.__set__font);
        v2.addProperty('hMargins', function () {}, v2.__set__hMargins);
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('pointerPosition', function () {}, v2.__set__pointerPosition);
        v2.addProperty('pointerWidth', function () {}, v2.__set__pointerWidth);
        v2.addProperty('textColor', function () {}, v2.__set__textColor);
        v2.addProperty('textSize', function () {}, v2.__set__textSize);
        v2.addProperty('vMargins', function () {}, v2.__set__vMargins);
        ASSetPropFlags(com.amcharts.Balloon.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 30 __Packages.com.amcharts.Shape {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Shape) {
        var v1 = function (target_mc, name, depth, x, y, bgColor, borderWidth, borderColor, bgAlpha, borderAlpha) {
          this.__x = x;
          this.__y = y;
          this.__bgColor = bgColor || this.__bgColor;
          this.__borderWidth = borderWidth || this.__borderWidth;
          this.__borderColor = borderColor || this.__bgColor;
          this.__bgAlpha = (bgAlpha !== undefined) ? bgAlpha : this.__bgAlpha;
          this.__borderAlpha = (borderAlpha !== undefined) ? borderAlpha : this.__borderAlpha;
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__init();
        };

        com.amcharts.Shape = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.__init = function () {
          if (this.__borderWidth == undefined || this.__borderWidth == null) {
            this.__mc.lineStyle(0, this.__bgColor, this.__borderAlpha);
          } else {
            this.__mc.lineStyle(this.__borderWidth, this.__borderColor, this.__borderAlpha);
          }
          if (this.__bgColor != undefined || this.__bgColor != null) {
            this.__mc.beginFill(this.__bgColor, this.__bgAlpha);
          }
          this.__mc.moveTo(this.__x[0], this.__y[0]);
          var v2 = 1;
          while (v2 < this.__x.length) {
            this.__mc.lineTo(this.__x[v2], this.__y[v2]);
            ++v2;
          }
          if (this.__bgColor != undefined || this.__bgColor != null) {
            this.__mc.endFill();
          }
        };

        v2.__bgColor = 0;
        v2.__borderWidth = 0;
        v2.__bgAlpha = 100;
        v2.__borderAlpha = 100;
        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.Shape.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 31 __Packages.com.amcharts.Graph {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Graph) {
        var v1 = function (target_mc, width, height, data_obj, min, max, isConnected, hideBulletsCount, switchable, path) {
          this.__target_mc = target_mc;
          this.__width = width;
          this.__height = height;
          this.__data_obj = data_obj;
          this.__max = max;
          this.__min = min;
          this.__isConnected = isConnected;
          this.__hideBulletsCount = hideBulletsCount || 0;
          this.__switchable = switchable;
          this.__path = path;
          this.__init();
        };

        com.amcharts.Graph = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          var v12 = this.__data_obj.value.length;
          var v14 = this.__width / (v12 - 1);
          var v13 = this.__height / (this.__max - this.__min);
          var v8 = new Array();
          var v11 = new Array();
          var v2 = 0;
          while (v2 < v12) {
            v11.push(v2 * v14);
            if (this.__data_obj.value[v2] == null) {
              v8.push(null);
            } else {
              v8.push(-(this.__data_obj.value[v2].value - this.__min) * v13);
              if (this.__data_obj.bullet != 'none' || this.__data_obj.value[v2].bullet != undefined) {
                var v5 = false;
                this.__extention = (this.__data_obj.bullet.substr(-3)).toLowerCase();
                if (this.__data_obj.value[v2].bullet != undefined) {
                  this.__extention = (this.__data_obj.value[v2].bullet.substr(-3)).toLowerCase();
                  v5 = true;
                }
                var v4 = this.__target_mc.createEmptyMovieClip('bullet' + v2, v2 + 100);
                if (this.__extention == 'gif' || this.__extention == 'jpg' || this.__extention == 'png' || this.__extention == 'swf') {
                  var v3 = v4.createEmptyMovieClip('icon', 0);
                  var v9 = new com.amcharts.Load();
                  if (this.__extention == 'swf') {
                    var v6 = '';
                  } else {
                    var v6 = '__placeBullet';
                  }
                  if (this.__data_obj.value[v2].bullet != undefined) {
                    v9.loadClip(this.__path + this.__data_obj.value[v2].bullet, v3, this, v6);
                  } else {
                    v9.loadClip(this.__path + this.__data_obj.bullet, v3, this, v6);
                  }
                } else {
                  if (this.__data_obj.value[v2].bullet != undefined) {
                    var v10 = this.__data_obj.value[v2].bullet;
                  } else {
                    var v10 = this.__data_obj.bullet;
                  }
                  var v3 = v4.attachMovie('bullet_' + v10, 'bullet' + v2, v2 + 100);
                  v3._width = this.__data_obj.bulletSize;
                  v3._height = this.__data_obj.bulletSize;
                  if (isNaN(this.__data_obj.value[v2].bulletSize) == false) {
                    v3._width = this.__data_obj.value[v2].bulletSize;
                    v3._height = this.__data_obj.value[v2].bulletSize;
                    v5 = true;
                  }
                  var v7 = new Color(v3);
                  v7.setRGB(this.__data_obj.bulletColor);
                  if (isNaN(this.__data_obj.value[v2].bulletColor) != true) {
                    v7 = new Color(v3);
                    v7.setRGB(this.__data_obj.value[v2].bulletColor);
                    v5 = true;
                  }
                }
                v4._x = v11[v2];
                v4._y = v8[v2];
                if (this.__data_obj.value[v2].url != undefined) {
                  v4.url = this.__data_obj.value[v2].url;
                  v4.onRelease = function () {
                    getURL(this.url, '_blank');
                  };

                }
                if (v12 > this.__hideBulletsCount && this.__hideBulletsCount != 0) {
                  if (v5 == false) {
                    v4._visible = false;
                  }
                }
              }
            }
            ++v2;
          }
          this.__y = v8;
          new com.amcharts.GraphLine(this.__target_mc, 'graph_mc', 20, v11, v8, this.__data_obj.lineWidth, this.__data_obj.color, this.__isConnected, this.__data_obj.lineAlpha);
          if (this.__switchable == true) {
            var v16 = new com.amcharts.GraphLine(this.__target_mc, 'hitArea_mc', 0, v11, v8, 10, 0, this.__isConnected, 0);
          }
          if (this.__data_obj.fillAlpha > 0) {
            if (this.__max >= 0 && this.__min <= 0) {
              var v15 = this.__min * v13;
            } else {
              var v15 = 0;
            }
            var v17 = new com.amcharts.GraphLine(this.__target_mc, 'fill_mc', 10, v11, v8, 0, this.__data_obj.color, this.__isConnected, 0, this.__data_obj.fillAlpha, v15);
          }
        };

        v2.__deleteSymbols = function (symbol) {
          var v2 = 0;
          while (v2 < this.__shapeY.length) {
            if (this.__shapeY[v2] == symbol) {
              this.__shapeY.splice(v2, 1);
              this.__shapeX.splice(v2, 1);
              this.__deleteSymbols(symbol);
              break;
            }
            ++v2;
          }
        };

        v2.__placeBullet = function (clip_mc) {
          clip_mc._x -= clip_mc._width / 2;
          clip_mc._y -= clip_mc._height / 2;
        };

        v2.__get__y = function () {
          return this.__y;
        };

        v2.addProperty('y', v2.__get__y, function () {});
        ASSetPropFlags(com.amcharts.Graph.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 32 __Packages.com.amcharts.GraphLine {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.GraphLine) {
        var v1 = function (target_mc, name, depth, x, y, width, color, isConnected, lineAlpha, fillAlpha, baseY) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          if (fillAlpha > 0) {
            this.__mc.beginFill(color, fillAlpha);
          }
          this.__mc.lineStyle(width, color, lineAlpha);
          if (isConnected == false || isConnected == undefined) {
            var v4 = 0;
            while (v4 < x.length) {
              if (y[v4 - 1] != null && y[v4 - 1] != undefined && x[v4 - 1] != null && x[v4 - 1] != undefined) {
                if (y[v4] != null && y[v4] != undefined) {
                  this.__mc.lineTo(x[v4], y[v4]);
                } else {
                  if (fillAlpha > 0) {
                    this.__mc.lineTo(x[v4 - 1], baseY);
                    this.__mc.lineTo(x[first], baseY);
                  }
                }
              } else {
                var first = v4;
                this.__mc.moveTo(x[v4], y[v4]);
              }
              ++v4;
            }
            if (fillAlpha > 0) {
              this.__mc.lineTo(x[v4 - 1], baseY);
              this.__mc.lineTo(x[first], baseY);
              this.__mc.endFill();
            }
          } else {
            var v4 = 0;
            while (v4 < y.length) {
              if (y[v4] != null && y[v4] != undefined && x[v4] != null && x[v4] != undefined) {
                var first = v4;
                break;
              }
              ++v4;
            }
            v4 = y.length;
            while (v4 >= 0) {
              if (y[v4] != null && y[v4] != undefined && x[v4] != null && x[v4] != undefined) {
                var v5 = v4;
                break;
              }
              --v4;
            }
            this.__mc.moveTo(x[first], y[first]);
            v4 = first;
            while (v4 <= v5) {
              if (y[v4] != null && y[v4] != undefined && x[v4] != null && x[v4] != undefined) {
                this.__mc.lineTo(x[v4], y[v4]);
              }
              ++v4;
            }
            if (fillAlpha > 0) {
              this.__mc.lineTo(x[v5], baseY);
              this.__mc.lineTo(x[first], baseY);
            }
          }
          if (fillAlpha > 0) {
            this.__mc.endFill();
          }
        };

        com.amcharts.GraphLine = v1;
        var v2 = v1.prototype;
        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.addProperty('mc', v2.__get__mc, function () {});
        ASSetPropFlags(com.amcharts.GraphLine.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 33 __Packages.com.amcharts.Legend {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Legend) {
        var v1 = function (target_mc, name, depth, data_obj, width) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__data_obj = data_obj;
          this.__width = width || this.__width;
        };

        com.amcharts.Legend = v1;
        var v2 = v1.prototype;
        v2.show = function () {
          this.__init();
        };

        v2.__init = function () {
          mx.events.EventDispatcher.initialize(this);
          var main_obj = this;
          this.__legendItem_mc = new Array();
          this.__checkBox = new Array();
          this.__labelButton = new Array();
          var v2 = 0;
          while (v2 < this.__data_obj.graph.length) {
            this.__legendItem_mc[v2] = this.__mc.createEmptyMovieClip('legendItem_mc' + v2, v2 + 100);
            this.__checkBox[v2] = new com.amcharts.CheckBox(this.__legendItem_mc[v2], 'checkBox', 0, this.__keySize);
            this.__checkBox[v2].bgColorPushedHover = this.__data_obj.graph[v2].color;
            this.__checkBox[v2].bgColorPushed = this.__checkBox[v2].bgColorPushedHover;
            this.__checkBox[v2].bgColorHover = this.__checkBox[v2].bgColorPushedHover;
            this.__checkBox[v2].bgColorActive = this.__checkBox[v2].bgColorPushedHover;
            this.__checkBox[v2].bgColor = this.__checkBox[v2].bgColorPushedHover;
            this.__checkBox[v2].checkMarkColor = this.__keyMarkColor;
            var v5 = this.__keyBorderColor;
            if (v5 == undefined || isNaN(v5) == true) {
              v5 = this.__data_obj.graph[v2].color;
            }
            this.__checkBox[v2].borderColorPushedHover = v5;
            this.__checkBox[v2].borderColorPushed = this.__checkBox[v2].borderColorPushedHover;
            this.__checkBox[v2].borderColorHover = this.__checkBox[v2].borderColorPushedHover;
            this.__checkBox[v2].borderColorActive = this.__checkBox[v2].borderColorPushedHover;
            this.__checkBox[v2].borderColor = this.__checkBox[v2].borderColorPushedHover;
            this.__checkBox[v2].checked = com.amcharts.Utils.changeBoolean(this.__data_obj.graph[v2].hidden);
            this.__checkBox[v2].id = v2;
            this.__checkBox[v2].show();
            if (this.__onOff == false) {
              this.__checkBox[v2].hitAreaWidth = 0;
              this.__checkBox[v2].hitAreaHeight = 0;
              this.__checkBox[v2].checked = false;
            }
            var v4 = new Object();
            v4.check = function (evtObj) {
              main_obj.__dispatchEvent('showGraph', evtObj.target.id);
            };

            v4.uncheck = function (evtObj) {
              main_obj.__dispatchEvent('hideGraph', evtObj.target.id);
            };

            this.__checkBox[v2].addEventListener('check', v4);
            this.__checkBox[v2].addEventListener('uncheck', v4);
            this.__labelButton[v2] = new com.amcharts.Button(this.__legendItem_mc[v2], 'label', 1, this.__data_obj.graph[v2].title, this.__width - this.__keySize - 2 * this.__spacing - 2 * this.__margins);
            this.__labelButton[v2].id = v2;
            this.__labelButton[v2].mc._x = this.__keySize;
            this.__labelButton[v2].pushable = true;
            this.__labelButton[v2].unpushable = true;
            this.__labelButton[v2].borderAlpha = 0;
            this.__labelButton[v2].borderWidth = 0;
            this.__labelButton[v2].hPadding = 5;
            this.__labelButton[v2].vPadding = 0;
            if (this.__yBalloonOnOff == true && this.__showIndicator != false) {
              this.__labelButton[v2].textUnderlinePushedHover = true;
              this.__labelButton[v2].textUnderlinePushed = this.__labelButton[v2].textUnderlinePushedHover;
            }
            this.__labelButton[v2].textAlign = 'left';
            this.__labelButton[v2].textColorPushed = this.__textColor;
            this.__labelButton[v2].textColor = this.__labelButton[v2].textColorPushed;
            this.__labelButton[v2].textSize = this.__textSize;
            this.__labelButton[v2].textColorActive = this.__textColorHover;
            this.__labelButton[v2].textColorPushedHover = this.__labelButton[v2].textColorActive;
            this.__labelButton[v2].textColorHover = this.__labelButton[v2].textColorActive;
            this.__labelButton[v2].bgAlphaPushedHover = 0;
            this.__labelButton[v2].bgAlphaHover = 0;
            this.__labelButton[v2].bgAlphaActive = 0;
            this.__labelButton[v2].bgAlphaPushed = 0;
            this.__labelButton[v2].bgAlpha = 0;
            this.__labelButton[v2].show();
            if (this.__yBalloonOnOff == false || this.__showIndicator == false) {
              this.__labelButton[v2].hitAreaWidth = 0;
              this.__labelButton[v2].hitAreaHeight = 0;
            } else {
              this.__labelButton[v2].hitAreaWidth = this.__labelButton[v2].label.textWidth + this.__labelButton[v2].mc._x;
              this.__labelButton[v2].hitAreaHeight = this.__labelButton[v2].mc._height;
            }
            if (this.__showIndicator == true) {
              var v3 = new Object();
              v3.rollOver = function (evtObj) {
                main_obj.__dispatchEvent('rollOver', evtObj.target.id);
              };

              v3.rollOut = function (evtObj) {
                main_obj.__dispatchEvent('rollOut', evtObj.target.id);
              };

              v3.push = function (evtObj) {
                main_obj.__dispatchEvent('select', evtObj.target.id);
              };

              v3.unpush = function (evtObj) {
                main_obj.__dispatchEvent('deselect', evtObj.target.id);
              };

              this.__labelButton[v2].addEventListener('rollOver', v3);
              this.__labelButton[v2].addEventListener('rollOut', v3);
              this.__labelButton[v2].addEventListener('push', v3);
              this.__labelButton[v2].addEventListener('unpush', v3);
            }
            var v6 = this.__labelButton[v2].label.textWidth;
            if (v6 == undefined) {
              v6 = 0;
            }
            if (v6 + this.__keySize + 2 * this.__spacing > this.__maxColumnWidth) {
              this.__maxColumnWidth = v6 + this.__keySize + 2 * this.__spacing;
            }
            ++v2;
          }
          this.__arrange();
        };

        v2.__arrange = function () {
          var v3 = 0;
          var v5 = 0;
          var v6 = this.__margins;
          var v8 = Math.floor((this.__width - this.__margins * 2 + this.__spacing) / this.__maxColumnWidth);
          var v4 = 1;
          var v7 = 1;
          if (v8 > this.__data_obj.graph.length) {
            v8 = this.__data_obj.graph.length;
          }
          var v9 = this.__data_obj.graph.length / v8;
          var v2 = 0;
          while (v2 < this.__data_obj.graph.length) {
            if (this.__legendItem_mc[v2]._height > v3) {
              v3 = this.__legendItem_mc[v2]._height;
            }
            this.__legendItem_mc[v2]._x = this.__margins + this.__maxColumnWidth * (v4 - 1);
            this.__legendItem_mc[v2]._y = v6 + v5;
            ++v4;
            if (v4 > v8) {
              if (v2 == 0) {
                v6 = this.__margins;
              } else {
                v6 = this.__legendItem_mc[v2]._y;
              }
              if (v7 == v9) {
                v5 = v3;
              } else {
                v5 = v3 + this.__spacing;
              }
              v4 = 1;
              v3 = 0;
              ++v7;
            }
            ++v2;
          }
          this.__height = this.__legendItem_mc[v2 - 1]._y + v5 + this.__margins;
          this.__drawBg();
        };

        v2.__drawBg = function () {
          var v2 = new com.amcharts.Rectangle(this.__mc, 'bg_mc', 0, this.__width, this.__height, this.__bgColor, 0, this.__borderColor, 0, this.__bgAlpha, this.__borderAlpha);
        };

        v2.__dispatchEvent = function (event, id) {
          this.dispatchEvent({'type': event, 'target': this, 'id': id});
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.button = function (id) {
          return this.__labelButton[id];
        };

        v2.__set__bgAlpha = function (param) {
          this.__bgAlpha = param;
          null;
          null;
          return this.__get__bgAlpha();
        };

        v2.__set__bgColor = function (param) {
          this.__bgColor = param;
          null;
          null;
          return this.__get__bgColor();
        };

        v2.__set__borderAlpha = function (param) {
          this.__borderAlpha = param;
          null;
          null;
          return this.__get__borderAlpha();
        };

        v2.__set__borderColor = function (param) {
          this.__borderColor = param;
          null;
          null;
          return this.__get__borderColor();
        };

        v2.__set__keyBorderColor = function (param) {
          this.__keyBorderColor = param;
          null;
          null;
          return this.__get__keyBorderColor();
        };

        v2.__set__keyMarkColor = function (param) {
          this.__keyMarkColor = param;
          null;
          null;
          return this.__get__keyMarkColor();
        };

        v2.__set__keySize = function (param) {
          this.__keySize = param;
          null;
          null;
          return this.__get__keySize();
        };

        v2.__set__textColor = function (param) {
          this.__textColor = param;
          null;
          null;
          return this.__get__textColor();
        };

        v2.__set__textColorHover = function (param) {
          this.__textColorHover = param;
          null;
          null;
          return this.__get__textColorHover();
        };

        v2.__set__onOff = function (param) {
          this.__onOff = param;
          null;
          null;
          return this.__get__onOff();
        };

        v2.__set__yBalloonOnOff = function (param) {
          this.__yBalloonOnOff = param;
          null;
          null;
          return this.__get__yBalloonOnOff();
        };

        v2.__set__spacing = function (param) {
          this.__spacing = param;
          null;
          null;
          return this.__get__spacing();
        };

        v2.__set__margins = function (param) {
          this.__margins = param;
          null;
          null;
          return this.__get__margins();
        };

        v2.__set__textSize = function (param) {
          this.__textSize = param;
          null;
          null;
          return this.__get__textSize();
        };

        v2.__set__showIndicator = function (param) {
          this.__showIndicator = param;
          null;
          null;
          return this.__get__showIndicator();
        };

        v2.__width = 390;
        v2.__textColor = 0;
        v2.__textColorHover = 16711680;
        v2.__keySize = 16;
        v2.__keyMarkColor = 16777215;
        v2.__onOff = true;
        v2.__yBalloonOnOff = true;
        v2.__spacing = 10;
        v2.__margins = 0;
        v2.__bgAlpha = 0;
        v2.__bgColor = 16777215;
        v2.__borderAlpha = 0;
        v2.__maxColumnWidth = 0;
        v2.__showIndicator = true;
        v2.addProperty('bgAlpha', function () {}, v2.__set__bgAlpha);
        v2.addProperty('bgColor', function () {}, v2.__set__bgColor);
        v2.addProperty('borderAlpha', function () {}, v2.__set__borderAlpha);
        v2.addProperty('borderColor', function () {}, v2.__set__borderColor);
        v2.addProperty('keyBorderColor', function () {}, v2.__set__keyBorderColor);
        v2.addProperty('keyMarkColor', function () {}, v2.__set__keyMarkColor);
        v2.addProperty('keySize', function () {}, v2.__set__keySize);
        v2.addProperty('margins', function () {}, v2.__set__margins);
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('onOff', function () {}, v2.__set__onOff);
        v2.addProperty('showIndicator', function () {}, v2.__set__showIndicator);
        v2.addProperty('spacing', function () {}, v2.__set__spacing);
        v2.addProperty('textColor', function () {}, v2.__set__textColor);
        v2.addProperty('textColorHover', function () {}, v2.__set__textColorHover);
        v2.addProperty('textSize', function () {}, v2.__set__textSize);
        v2.addProperty('yBalloonOnOff', function () {}, v2.__set__yBalloonOnOff);
        ASSetPropFlags(com.amcharts.Legend.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 34 __Packages.mx.events.EventDispatcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.EventDispatcher) {
        var v1 = function () {};

        mx.events.EventDispatcher = v1;
        var v2 = v1.prototype;
        v1._removeEventListener = function (queue, event, handler) {
          if (queue != undefined) {
            var v4 = queue.length;
            var v1;
            v1 = 0;
            while (v1 < v4) {
              var v2 = queue[v1];
              if (v2 == handler) {
                queue.splice(v1, 1);
                return undefined;
              }
              ++v1;
            }
          }
        };

        v1.initialize = function (object) {
          if (mx.events.EventDispatcher._fEventDispatcher == undefined) {
            mx.events.EventDispatcher._fEventDispatcher = new mx.events.EventDispatcher();
          }
          object.addEventListener = mx.events.EventDispatcher._fEventDispatcher.addEventListener;
          object.removeEventListener = mx.events.EventDispatcher._fEventDispatcher.removeEventListener;
          object.dispatchEvent = mx.events.EventDispatcher._fEventDispatcher.dispatchEvent;
          object.dispatchQueue = mx.events.EventDispatcher._fEventDispatcher.dispatchQueue;
        };

        v2.dispatchQueue = function (queueObj, eventObj) {
          var v7 = '__q_' + eventObj.type;
          var v4 = queueObj[v7];
          if (v4 != undefined) {
            var v5;
            for (v5 in v4) {
              var v1 = v4[v5];
              var v3 = typeof v1;
              if (v3 == 'object' || v3 == 'movieclip') {
                if (v1.handleEvent != undefined) {
                  v1.handleEvent(eventObj);
                }
                if (v1[eventObj.type] != undefined) {
                  if (mx.events.EventDispatcher.exceptions[eventObj.type] == undefined) {
                    v1[eventObj.type](eventObj);
                  }
                }
              } else {
                v1.apply(queueObj, [eventObj]);
              }
            }
          }
        };

        v2.dispatchEvent = function (eventObj) {
          if (eventObj.target == undefined) {
            eventObj.target = this;
          }
          this[eventObj.type + 'Handler'](eventObj);
          this.dispatchQueue(this, eventObj);
        };

        v2.addEventListener = function (event, handler) {
          var v3 = '__q_' + event;
          if (this[v3] == undefined) {
            this[v3] = new Array();
          }
          _global.ASSetPropFlags(this, v3, 1);
          mx.events.EventDispatcher._removeEventListener(this[v3], event, handler);
          this[v3].push(handler);
        };

        v2.removeEventListener = function (event, handler) {
          var v2 = '__q_' + event;
          mx.events.EventDispatcher._removeEventListener(this[v2], event, handler);
        };

        v1._fEventDispatcher = undefined;
        v1.exceptions = {'move': 1, 'draw': 1, 'load': 1};
        ASSetPropFlags(mx.events.EventDispatcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 35 __Packages.com.amcharts.SimpleButton {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.SimpleButton) {
        var v1 = function (target_mc, name, depth, width, height) {
          this.__mc = target_mc.createEmptyMovieClip(name, depth);
          this.__width = width;
          this.__height = height;
          this.__cornerRadius = _global.amchartsConfig.button.cornerRadius || this.__cornerRadius;
          this.__borderAlpha = _global.amchartsConfig.button.borderAlpha || this.__borderAlpha;
          this.__borderWidth = _global.amchartsConfig.button.borderWidth || this.__borderWidth;
          this.__bgColor = _global.amchartsConfig.button.bgColor || this.__bgColor;
          this.__bgAlpha = _global.amchartsConfig.button.bgAlpha || this.__bgAlpha;
          this.__borderColor = _global.amchartsConfig.button.borderColor || this.__borderColor;
          this.__bgColorHover = _global.amchartsConfig.button.bgColorHover || this.__bgColorHover;
          this.__bgAlphaHover = _global.amchartsConfig.button.bgAlphaHover || this.__bgAlphaHover;
          this.__borderColorHover = _global.amchartsConfig.button.borderColorHover || this.__borderColorHover;
          this.__bgColorActive = _global.amchartsConfig.button.bgColorActive || this.__bgColorActive;
          this.__bgAlphaActive = _global.amchartsConfig.button.bgAlphaActive || this.__bgAlphaActive;
          this.__borderColorActive = _global.amchartsConfig.button.borderColorActive || this.__borderColorActive;
          this.__bgColorPushed = _global.amchartsConfig.button.bgColorPushed || this.__bgColorPushed;
          this.__bgAlphaPushed = _global.amchartsConfig.button.bgAlphaPushed || this.__bgAlphaPushed;
          this.__borderColorPushed = _global.amchartsConfig.button.borderColorPushed || this.__borderColorPushed;
        };

        com.amcharts.SimpleButton = v1;
        var v2 = v1.prototype;
        v2.__init = function () {
          mx.events.EventDispatcher.initialize(this);
          var main_obj = this;
          if (this.__hitAreaWidth == undefined) {
            this.__hitAreaWidth = this.__width;
          }
          if (this.__hitAreaHeight == undefined) {
            this.__hitAreaHeight = this.__height;
          }
          var v4 = new com.amcharts.Rectangle(this.__mc, 'hotArea_mc', this.__hitArea_depth, this.__hitAreaWidth, this.__hitAreaHeight, this.__bgColor, this.__borderWidth, this.__bgColor, this.__cornerRadius);
          this.__hitArea_mc = v4.mc;
          this.__hitArea_mc._alpha = 0;
          var v2 = new com.amcharts.Rectangle(this.__mc, 'bg_mc', this.__bg_depth, this.__width, this.__height, this.__bgColor, this.__borderWidth, this.__bgColor, this.__cornerRadius);
          this.__bg_mc = v2.mc;
          this.__bg_mc._alpha = this.__bgAlpha;
          var v3 = new com.amcharts.Rectangle(this.__mc, 'border_mc', this.__border_depth, this.__width, this.__height, null, this.__borderWidth, this.__borderColor, this.__cornerRadius);
          this.__border_mc = v3.mc;
          this.__border_mc._alpha = this.__borderAlpha;
          this.__hitArea_mc.onRollOver = function () {
            main_obj.__dispatchEvent('rollOver');
            if (main_obj.__pushed != true) {
              main_obj.__changeButton('Hover');
            } else {
              main_obj.__changeButton('PushedHover');
            }
          };

          this.__hitArea_mc.onPress = function () {
            main_obj.__dispatchEvent('press');
            main_obj.__changeButton('Active');
          };

          this.__hitArea_mc.onRelease = function () {
            main_obj.__dispatchEvent('release');
            if (main_obj.__pushable == true) {
              if (main_obj.__unpushable == true && main_obj.__pushed == true) {
                main_obj.__dispatchEvent('unpush');
                main_obj.__pushed = false;
                main_obj.__changeButton('Hover');
              } else {
                main_obj.__dispatchEvent('push');
                main_obj.__pushed = true;
                main_obj.__changeButton('PushedHover');
              }
            } else {
              main_obj.__changeButton('Hover');
            }
          };

          this.__hitArea_mc.onReleaseOutside = function () {
            main_obj.__dispatchEvent('rollOut');
            if (main_obj.__pushed == true) {
              main_obj.__changeButton('Pushed');
            } else {
              main_obj.__changeButton('');
            }
          };

          this.__hitArea_mc.onRollOut = this.__hitArea_mc.onReleaseOutside;
          if (this.__pushed == true) {
            this.__changeButton('Pushed');
          }
        };

        v2.__changeButton = function (status) {
          var v2 = new Color(this.__bg_mc);
          v2.setRGB(this['__bgColor' + status]);
          this.__bg_mc._alpha = this['__bgAlpha' + status];
          var v3 = new Color(this.__border_mc);
          v3.setRGB(this['__borderColor' + status]);
        };

        v2.__dispatchEvent = function (event) {
          this.dispatchEvent({'type': event, 'target': this});
        };

        v2.show = function () {
          this.__init();
        };

        v2.__set__pushable = function (param) {
          this.__pushable = param;
          null;
          null;
          return this.__get__pushable();
        };

        v2.__set__unpushable = function (param) {
          this.__unpushable = param;
          null;
          null;
          return this.__get__unpushable();
        };

        v2.__set__pushed = function (param) {
          this.__pushed = param;
          if (param == true) {
            this.__changeButton('Pushed');
          }
          null;
          null;
          return this.__get__pushed();
        };

        v2.__set__hover = function (param) {
          if (param == true) {
            if (this.__pushed == true) {
              this.__changeButton('PushedHover');
            } else {
              this.__changeButton('Hover');
            }
          } else {
            if (this.__pushed == true) {
              this.__changeButton('Pushed');
            } else {
              this.__changeButton('');
            }
          }
          null;
          null;
          return this.__get__hover();
        };

        v2.__set__cornerRadius = function (param) {
          this.__cornerRadius = param;
          null;
          null;
          return this.__get__cornerRadius();
        };

        v2.__set__borderAlpha = function (param) {
          this.__borderAlpha = param;
          null;
          null;
          return this.__get__borderAlpha();
        };

        v2.__set__borderWidth = function (param) {
          this.__borderWidth = param;
          null;
          null;
          return this.__get__borderWidth();
        };

        v2.__set__bgColor = function (param) {
          this.__bgColor = param;
          null;
          null;
          return this.__get__bgColor();
        };

        v2.__set__bgAlpha = function (param) {
          this.__bgAlpha = param;
          null;
          null;
          return this.__get__bgAlpha();
        };

        v2.__set__borderColor = function (param) {
          this.__borderColor = param;
          null;
          null;
          return this.__get__borderColor();
        };

        v2.__set__bgColorHover = function (param) {
          this.__bgColorHover = param;
          null;
          null;
          return this.__get__bgColorHover();
        };

        v2.__set__bgAlphaHover = function (param) {
          this.__bgAlphaHover = param;
          null;
          null;
          return this.__get__bgAlphaHover();
        };

        v2.__set__borderColorHover = function (param) {
          this.__borderColorHover = param;
          null;
          null;
          return this.__get__borderColorHover();
        };

        v2.__set__bgColorActive = function (param) {
          this.__bgColorActive = param;
          null;
          null;
          return this.__get__bgColorActive();
        };

        v2.__set__bgAlphaActive = function (param) {
          this.__bgAlphaActive = param;
          null;
          null;
          return this.__get__bgAlphaActive();
        };

        v2.__set__borderColorActive = function (param) {
          this.__borderColorActive = param;
          null;
          null;
          return this.__get__borderColorActive();
        };

        v2.__set__bgColorPushed = function (param) {
          this.__bgColorPushed = param;
          null;
          null;
          return this.__get__bgColorPushed();
        };

        v2.__set__bgAlphaPushed = function (param) {
          this.__bgAlphaPushed = param;
          null;
          null;
          return this.__get__bgAlphaPushed();
        };

        v2.__set__borderColorPushed = function (param) {
          this.__borderColorPushed = param;
          null;
          null;
          return this.__get__borderColorPushed();
        };

        v2.__set__bgColorPushedHover = function (param) {
          this.__bgColorPushedHover = param;
          null;
          null;
          return this.__get__bgColorPushedHover();
        };

        v2.__set__bgAlphaPushedHover = function (param) {
          this.__bgAlphaPushedHover = param;
          null;
          null;
          return this.__get__bgAlphaPushedHover();
        };

        v2.__set__borderColorPushedHover = function (param) {
          this.__borderColorPushedHover = param;
          null;
          null;
          return this.__get__borderColorPushedHover();
        };

        v2.__set__hitAreaWidth = function (param) {
          this.__hitAreaWidth = param;
          this.__hitArea_mc._width = param;
          null;
          null;
          return this.__get__hitAreaWidth();
        };

        v2.__set__hitAreaHeight = function (param) {
          this.__hitAreaHeight = param;
          this.__hitArea_mc._height = param;
          null;
          null;
          return this.__get__hitAreaHeight();
        };

        v2.__get__mc = function () {
          return this.__mc;
        };

        v2.__get__width = function () {
          return this.__width;
        };

        v2.__cornerRadius = 8;
        v2.__pushable = false;
        v2.__unpushable = false;
        v2.__pushed = false;
        v2.__borderAlpha = 100;
        v2.__borderWidth = 4;
        v2.__bgColor = 16777215;
        v2.__bgAlpha = 100;
        v2.__borderColor = 7829367;
        v2.__bgColorHover = 16777215;
        v2.__bgAlphaHover = 100;
        v2.__borderColorHover = 16750848;
        v2.__bgColorActive = 16777215;
        v2.__bgAlphaActive = 100;
        v2.__borderColorActive = 16737792;
        v2.__bgColorPushed = 16750848;
        v2.__bgAlphaPushed = 100;
        v2.__borderColorPushed = 16750848;
        v2.__bgColorPushedHover = 16750848;
        v2.__bgAlphaPushedHover = 100;
        v2.__borderColorPushedHover = 16737792;
        v2.__hitArea_depth = 0;
        v2.__bg_depth = 10;
        v2.__border_depth = 20;
        v2.addProperty('bgAlpha', function () {}, v2.__set__bgAlpha);
        v2.addProperty('bgAlphaActive', function () {}, v2.__set__bgAlphaActive);
        v2.addProperty('bgAlphaHover', function () {}, v2.__set__bgAlphaHover);
        v2.addProperty('bgAlphaPushed', function () {}, v2.__set__bgAlphaPushed);
        v2.addProperty('bgAlphaPushedHover', function () {}, v2.__set__bgAlphaPushedHover);
        v2.addProperty('bgColor', function () {}, v2.__set__bgColor);
        v2.addProperty('bgColorActive', function () {}, v2.__set__bgColorActive);
        v2.addProperty('bgColorHover', function () {}, v2.__set__bgColorHover);
        v2.addProperty('bgColorPushed', function () {}, v2.__set__bgColorPushed);
        v2.addProperty('bgColorPushedHover', function () {}, v2.__set__bgColorPushedHover);
        v2.addProperty('borderAlpha', function () {}, v2.__set__borderAlpha);
        v2.addProperty('borderColor', function () {}, v2.__set__borderColor);
        v2.addProperty('borderColorActive', function () {}, v2.__set__borderColorActive);
        v2.addProperty('borderColorHover', function () {}, v2.__set__borderColorHover);
        v2.addProperty('borderColorPushed', function () {}, v2.__set__borderColorPushed);
        v2.addProperty('borderColorPushedHover', function () {}, v2.__set__borderColorPushedHover);
        v2.addProperty('borderWidth', function () {}, v2.__set__borderWidth);
        v2.addProperty('cornerRadius', function () {}, v2.__set__cornerRadius);
        v2.addProperty('hitAreaHeight', function () {}, v2.__set__hitAreaHeight);
        v2.addProperty('hitAreaWidth', function () {}, v2.__set__hitAreaWidth);
        v2.addProperty('hover', function () {}, v2.__set__hover);
        v2.addProperty('mc', v2.__get__mc, function () {});
        v2.addProperty('pushable', function () {}, v2.__set__pushable);
        v2.addProperty('pushed', function () {}, v2.__set__pushed);
        v2.addProperty('unpushable', function () {}, v2.__set__unpushable);
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(com.amcharts.SimpleButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 36 __Packages.com.amcharts.CheckBox {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.CheckBox) {
        var v1 = function (target_mc, name, depth, size) {
          super(target_mc, name, depth, size, size);
          this.__width = size;
          this.__height = size;
          this.__vColor = _global.amchartsConfig.checkBox.checkMarkColor || this.__vColor;
          this.__cornerRadius = _global.amchartsConfig.checkBox.cornerRadius || this.__cornerRadius;
          this.__bgColor = _global.amchartsConfig.checkBox.bgColor || this.__bgColor;
          this.__bgColorPushed = _global.amchartsConfig.checkBox.bgColorPushed || this.__bgColorPushed;
          this.__bgColorActive = _global.amchartsConfig.checkBox.bgColorActive || this.__bgColorActive;
          this.__bgColorHover = _global.amchartsConfig.checkBox.bgColorHover || this.__bgColorHover;
          this.__bgColorPushedHover = _global.amchartsConfig.checkBox.bgColorPushedHover || this.__bgColorPushedHover;
          this.__borderColor = _global.amchartsConfig.checkBox.borderColor || this.__borderColor;
          this.__borderColorPushed = _global.amchartsConfig.checkBox.borderColorPushed || this.__borderColorPushed;
          this.__borderColorActive = _global.amchartsConfig.checkBox.borderColorActive || this.__borderColorActive;
          this.__borderColorHover = _global.amchartsConfig.checkBox.borderColorHover || this.__borderColorHover;
          this.__borderColorPushedHover = _global.amchartsConfig.checkBox.borderColorPushedHover || this.__borderColorPushedHover;
        };

        com.amcharts.CheckBox = v1;
        com.amcharts.CheckBox extends com.amcharts.SimpleButton;
        var v2 = v1.prototype;
        v2.__init = function () {
          var v5 = [this.__borderWidth + 1, this.__width / 2, this.__width - (this.__borderWidth + 1), this.__width / 2, this.__borderWidth + 1];
          var v4 = [this.__height / 2, this.__height - (this.__borderWidth + 1), this.__borderWidth + 1, this.__height - (this.__borderWidth + this.__height / 5), this.__height / 2];
          var v3 = new com.amcharts.Shape(this.__mc, 'v_mc', this.__icon_depth, v5, v4, this.__vColor);
          this.__v_mc = v3.mc;
          this.__check();
          super.__init();
        };

        v2.__changeButton = function (status) {
          this.__check();
          if (this.__pushed != this.__oldPushed) {
            if (this.__pushed == true) {
              this.__dispatchEvent('check');
            } else {
              this.__dispatchEvent('uncheck');
            }
          }
          this.__oldPushed = this.__pushed;
          super.__changeButton(status);
        };

        v2.__check = function () {
          if (this.__pushed == true) {
            this.__v_mc._visible = true;
          } else {
            this.__v_mc._visible = false;
          }
        };

        v2.label = function (text, color, size) {
          var v2 = new com.amcharts.Text(this.__mc, 'label', this.__label_depth, this.__size + this.__size / 10 + 2);
          v2.size = size;
          v2.color = color;
          v2.txt = text;
          v2.y = (this.__size - v2.textHeight) / 2 - 1;
          this.__hitAreaWidth = v2.x + v2.textWidth;
          this.__hitAreaHeight = v2.textHeight;
          if (this.__hitAreaHeight < this.__height) {
            this.__hitAreaHeight = this.__height;
          }
        };

        v2.__set__checkMarkColor = function (param) {
          this.__vColor = param;
          null;
          null;
          return this.__get__checkMarkColor();
        };

        v2.__set__checked = function (param) {
          this.__pushed = param;
          this.__check();
          null;
          null;
          return this.__get__checked();
        };

        v2.__cornerRadius = 0;
        v2.__borderWidth = 1;
        v2.__vColor = 0;
        v2.__borderColor = 0;
        v2.__borderColorPushed = 0;
        v2.__borderColorHover = 0;
        v2.__borderColorPushedHover = 0;
        v2.__borderColorActive = 16737792;
        v2.__bgColor = 16777215;
        v2.__bgColorPushed = 16777215;
        v2.__bgColorHover = 16777215;
        v2.__bgColorPushedHover = 16777215;
        v2.__bgColorActive = 16777215;
        v2.__pushed = false;
        v2.__pushable = true;
        v2.__unpushable = true;
        v2.__label_depth = 100;
        v2.__icon_depth = 50;
        v2.addProperty('checkMarkColor', function () {}, v2.__set__checkMarkColor);
        v2.addProperty('checked', function () {}, v2.__set__checked);
        ASSetPropFlags(com.amcharts.CheckBox.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 37 __Packages.com.amcharts.Button {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Button) {
        var v1 = function (target_mc, name, depth, text, width, height) {
          super(target_mc, name, depth, width, height);
          this.__text = text;
          this.__hPadding = _global.amchartsConfig.button.hPadding || this.__hPadding;
          this.__vPadding = _global.amchartsConfig.button.vPadding || this.__vPadding;
          this.__textBold = _global.amchartsConfig.button.textBold || this.__textBold;
          this.__textSize = _global.amchartsConfig.button.textSize || this.__textSize;
          this.__textAlign = _global.amchartsConfig.button.textAlign || this.__textAlign;
          this.__textFont = _global.amchartsConfig.button.textFont || this.__textFont;
          this.__textUnderline = _global.amchartsConfig.button.textUnderline || this.__textUnderline;
          this.__textColor = _global.amchartsConfig.button.textColor || this.__textColor;
          this.__textUnderlineHover = _global.amchartsConfig.button.textUnderlineHover || this.__textUnderlineHover;
          this.__textColorHover = _global.amchartsConfig.button.textColorHover || this.__textColorHover;
          this.__textUnderlineActive = _global.amchartsConfig.button.textUnderlineActive || this.__textUnderlineActive;
          this.__textColorActive = _global.amchartsConfig.button.textColorActive || this.__textColorActive;
          this.__textUnderlinePushed = _global.amchartsConfig.button.textUnderlinePushed || this.__textUnderlinePushed;
          this.__textColorPushed = _global.amchartsConfig.button.textColorPushed || this.__textColorPushed;
          this.__textUnderlinePushedHover = _global.amchartsConfig.button.textUnderlinePushedHover || this.__textUnderlinePushedHover;
          this.__textColorPushedHover = _global.amchartsConfig.button.textColorPushedHover || this.__textColorPushedHover;
        };

        com.amcharts.Button = v1;
        com.amcharts.Button extends com.amcharts.SimpleButton;
        var v2 = v1.prototype;
        v2.__init = function () {
          var v3 = 0;
          var v4 = 0;
          var v5 = 0;
          if (this.__iconId != undefined) {
            this.__icon_mc = this.__mc.attachMovie(this.__iconId, 'icon', this.__icon_depth);
            this.__icon_mc._x = this.__hPadding + this.__borderWidth;
            this.__icon_mc._y = this.__vPadding + this.__borderWidth;
            v3 = this.__icon_mc._width;
            v4 = this.__icon_mc._height;
            v5 = this.__iconSpacing;
            if (this.__useTextColors == true) {
              var v8 = new Color(this.__icon_mc);
              v8.setRGB(this.__textColor);
            }
          }
          if (this.__text != '' && this.__text != undefined) {
            if (this.__width != undefined) {
              var v7 = this.__width - 2 * (this.__hPadding + this.__borderWidth) - v3 - this.__iconSpacing;
            } else {
              var v7 = 0;
            }
            if (this.__height != undefined) {
              var v6 = this.__height - 2 * (this.__hPadding + this.__borderWidth);
            } else {
              var v6 = 0;
            }
            this.__label = new com.amcharts.Text(this.__mc, 'label', this.__text_depth, this.__hPadding + this.__borderWidth + v3 + v5, this.__borderWidth + this.__vPadding, v7, v6);
            this.__label.__set__color(this.__textColor);
            this.__label.__set__font(this.__textFont);
            this.__label.__set__underline(this.__textUnderline);
            this.__label.__set__bold(this.__textBold);
            this.__label.__set__size(this.__textSize);
            this.__label.__set__align(this.__textAlign);
            this.__label.__set__txt(this.__text);
            if (this.__height > this.__label.__get__textHeight()) {
              this.__label.__set__y((this.__height - this.__label.__get__textHeight()) / 2 - 2);
            }
          }
          if (this.__width == undefined) {
            this.__width = 2 * (this.__hPadding + this.__borderWidth) + v3;
            if (this.__label.__get__width() != undefined) {
              this.__width += this.__label.width;
            }
            if (this.__text != '' && this.__text != undefined) {
              this.__width += v5;
            }
          }
          if (this.__height == undefined) {
            this.__label.__get__height();
            if (this.__label.__get__height() > v4) {
              this.__height = 2 * (this.__vPadding + this.__borderWidth) + this.__label.__get__height();
            } else {
              this.__height = 2 * (this.__vPadding + this.__borderWidth) + v4;
            }
          }
          super.__init();
        };

        v2.__changeButton = function (status) {
          this.__label.__set__underline(this['__textUnderline' + status]);
          this.__label.__set__color(this['__textColor' + status]);
          if (this.__useTextColors == true) {
            var v4 = new Color(this.__icon_mc);
            v4.setRGB(this['__textColor' + status]);
          }
          super.__changeButton(status);
        };

        v2.attachIcon = function (id, useTextColors) {
          this.__useTextColors = useTextColors;
          this.__iconId = id;
        };

        v2.__set__hPadding = function (param) {
          this.__hPadding = param;
          null;
          null;
          return this.__get__hPadding();
        };

        v2.__set__vPadding = function (param) {
          this.__vPadding = param;
          null;
          null;
          return this.__get__vPadding();
        };

        v2.__set__txt = function (param) {
          this.__text = param;
          null;
          null;
          return this.__get__txt();
        };

        v2.__set__bold = function (param) {
          this.__textBold = param;
          null;
          null;
          return this.__get__bold();
        };

        v2.__set__textSize = function (param) {
          this.__textSize = param;
          null;
          null;
          return this.__get__textSize();
        };

        v2.__set__textAlign = function (param) {
          this.__textAlign = param;
          null;
          null;
          return this.__get__textAlign();
        };

        v2.__set__font = function (param) {
          this.__textFont = param;
          null;
          null;
          return this.__get__font();
        };

        v2.__set__textUnderline = function (param) {
          this.__textUnderline = param;
          null;
          null;
          return this.__get__textUnderline();
        };

        v2.__set__textColor = function (param) {
          this.__textColor = param;
          null;
          null;
          return this.__get__textColor();
        };

        v2.__set__textUnderlineHover = function (param) {
          this.__textUnderlineHover = param;
          null;
          null;
          return this.__get__textUnderlineHover();
        };

        v2.__set__textColorHover = function (param) {
          this.__textColorHover = param;
          null;
          null;
          return this.__get__textColorHover();
        };

        v2.__set__textUnderlineActive = function (param) {
          this.__textUnderlineActive = param;
          null;
          null;
          return this.__get__textUnderlineActive();
        };

        v2.__set__textColorActive = function (param) {
          this.__textColorActive = param;
          null;
          null;
          return this.__get__textColorActive();
        };

        v2.__set__textUnderlinePushed = function (param) {
          this.__textUnderlinePushed = param;
          null;
          null;
          return this.__get__textUnderlinePushed();
        };

        v2.__set__textColorPushed = function (param) {
          this.__textColorPushed = param;
          null;
          null;
          return this.__get__textColorPushed();
        };

        v2.__set__textUnderlinePushedHover = function (param) {
          this.__textUnderlinePushedHover = param;
          null;
          null;
          return this.__get__textUnderlinePushedHover();
        };

        v2.__set__textColorPushedHover = function (param) {
          this.__textColorPushedHover = param;
          null;
          null;
          return this.__get__textColorPushedHover();
        };

        v2.__get__label = function () {
          return this.__label;
        };

        v2.__hPadding = 10;
        v2.__vPadding = 4;
        v2.__textBold = false;
        v2.__textAlign = 'center';
        v2.__textUnderline = false;
        v2.__textColor = 0;
        v2.__textUnderlineHover = false;
        v2.__textColorHover = 10027008;
        v2.__textUnderlineActive = false;
        v2.__textColorActive = 16711680;
        v2.__textUnderlinePushed = false;
        v2.__textColorPushed = 10027008;
        v2.__textUnderlinePushedHover = false;
        v2.__textColorPushedHover = 10027008;
        v2.__iconSpacing = 5;
        v2.__text_depth = 30;
        v2.__icon_depth = 40;
        v2.addProperty('bold', function () {}, v2.__set__bold);
        v2.addProperty('font', function () {}, v2.__set__font);
        v2.addProperty('hPadding', function () {}, v2.__set__hPadding);
        v2.addProperty('label', v2.__get__label, function () {});
        v2.addProperty('textAlign', function () {}, v2.__set__textAlign);
        v2.addProperty('textColor', function () {}, v2.__set__textColor);
        v2.addProperty('textColorActive', function () {}, v2.__set__textColorActive);
        v2.addProperty('textColorHover', function () {}, v2.__set__textColorHover);
        v2.addProperty('textColorPushed', function () {}, v2.__set__textColorPushed);
        v2.addProperty('textColorPushedHover', function () {}, v2.__set__textColorPushedHover);
        v2.addProperty('textSize', function () {}, v2.__set__textSize);
        v2.addProperty('textUnderline', function () {}, v2.__set__textUnderline);
        v2.addProperty('textUnderlineActive', function () {}, v2.__set__textUnderlineActive);
        v2.addProperty('textUnderlineHover', function () {}, v2.__set__textUnderlineHover);
        v2.addProperty('textUnderlinePushed', function () {}, v2.__set__textUnderlinePushed);
        v2.addProperty('textUnderlinePushedHover', function () {}, v2.__set__textUnderlinePushedHover);
        v2.addProperty('txt', function () {}, v2.__set__txt);
        v2.addProperty('vPadding', function () {}, v2.__set__vPadding);
        ASSetPropFlags(com.amcharts.Button.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 38 __Packages.com.amcharts.ParseData {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.ParseData) {
        var v1 = function (settings) {
          this.__settings = settings;
          this.__data_obj = new Object();
          this.__data_obj.xaxis = new Object();
          this.__data_obj.xaxis.value = new Array();
          this.__data_obj.graphs = new Object();
          this.__data_obj.graphs.graph = new Array();
          this.__data_obj.graphs.leftcount = 0;
          this.__data_obj.graphs.rightcount = 0;
        };

        com.amcharts.ParseData = v1;
        var v2 = v1.prototype;
        v2.parseCSV = function (csv, separator) {
          csv = com.amcharts.Utils.replace(csv, '\r\n', '\n');
          csv = com.amcharts.Utils.replace(csv, '\r', '\n');
          var v8 = csv.split('\n');
          v8 = com.amcharts.Arrays.deleteEqualTo(v8, ' ');
          v8 = com.amcharts.Arrays.deleteEqualTo(v8, '');
          var v7 = (v8[0].split(separator)).length;
          var v11 = new Array();
          var v3 = 1;
          while (v3 < v7) {
            var v2 = v3 - 1;
            this.__data_obj.graphs.graph[v2] = new Object();
            this.__data_obj.graphs.graph[v2].value = new Array();
            this.__data_obj.graphs.graph[v2].axis = this.__settings[v2].axis || 'left';
            this.__data_obj.graphs.graph[v2].title = this.__settings[v2].title || '';
            this.__data_obj.graphs.graph[v2].unit = this.__settings[v2].unit || '';
            this.__data_obj.graphs.graph[v2].unit_position = this.__settings[v2].unit_position || 'right';
            this.__data_obj.graphs.graph[v2].color = this.__settings[v2].color || this.__graphColors[v2];
            this.__data_obj.graphs.graph[v2].color = '0x' + this.__data_obj.graphs.graph[v2].color.substr(-6);
            this.__data_obj.graphs.graph[v2].colorHover = this.__settings[v2].color_hover || 'BBBB00';
            this.__data_obj.graphs.graph[v2].colorHover = '0x' + this.__data_obj.graphs.graph[v2].colorHover.substr(-6);
            this.__data_obj.graphs.graph[v2].lineAlpha = Number(this.__settings[v2].line_alpha || 100);
            this.__data_obj.graphs.graph[v2].lineWidth = Number(this.__settings[v2].line_width || 0);
            this.__data_obj.graphs.graph[v2].fillAlpha = Number(this.__settings[v2].fill_alpha || 0);
            this.__data_obj.graphs.graph[v2].balloonColor = this.__settings[v2].balloon_color || this.__data_obj.graphs.graph[v2].color;
            this.__data_obj.graphs.graph[v2].balloonColor = '0x' + this.__data_obj.graphs.graph[v2].balloonColor.substr(-6);
            this.__data_obj.graphs.graph[v2].balloonTextColor = this.__settings[v2].balloon_text_color || 'FFFFFF';
            this.__data_obj.graphs.graph[v2].balloonTextColor = '0x' + this.__data_obj.graphs.graph[v2].balloonTextColor.substr(-6);
            this.__data_obj.graphs.graph[v2].bullet = this.__settings[v2].bullet || 'none';
            this.__data_obj.graphs.graph[v2].bulletSize = Number(this.__settings[v2].bullet_size || 8);
            this.__data_obj.graphs.graph[v2].bulletColor = this.__settings[v2].bullet_color || this.__data_obj.graphs.graph[v2].color;
            this.__data_obj.graphs.graph[v2].bulletColor = '0x' + this.__data_obj.graphs.graph[v2].bulletColor.substr(-6);
            this.__data_obj.graphs.graph[v2].hidden = com.amcharts.Utils.parseTrue(this.__settings[v2].hidden || false);
            this.__data_obj.graphs.graph[v2].selected = com.amcharts.Utils.parseTrue(this.__settings[v2].selected || true);
            this.__data_obj.graphs.graph[v2].color = Number(this.__data_obj.graphs.graph[v2].color);
            this.__data_obj.graphs.graph[v2].colorHover = Number(this.__data_obj.graphs.graph[v2].colorHover);
            this.__data_obj.graphs.graph[v2].balloonColor = Number(this.__data_obj.graphs.graph[v2].balloonColor);
            this.__data_obj.graphs.graph[v2].balloonTextColor = Number(this.__data_obj.graphs.graph[v2].balloonTextColor);
            this.__data_obj.graphs.graph[v2].bulletColor = Number(this.__data_obj.graphs.graph[v2].bulletColor);
            if (this.__data_obj.graphs.graph[v2].axis == 'right') {
              ++this.__data_obj.graphs.rightcount;
            } else {
              ++this.__data_obj.graphs.leftcount;
            }
            ++v3;
          }
          var v4 = 0;
          while (v4 < v8.length) {
            var v6 = v8[v4].split(separator);
            this.__data_obj.xaxis.value[v4] = new Object();
            this.__data_obj.xaxis.value[v4].value = v6[0];
            v3 = 1;
            while (v3 < v7) {
              this.__data_obj.graphs.graph[v3 - 1].value[v4] = new Object();
              var v5 = Number(com.amcharts.Utils.stripSymbols(v6[v3], ' '));
              if (isNaN(v5) != true) {
                this.__data_obj.graphs.graph[v3 - 1].value[v4].value = Number(v5);
              } else {
                this.__data_obj.graphs.graph[v3 - 1].value[v4] = null;
              }
              ++v3;
            }
            ++v4;
          }
          return this.__data_obj;
        };

        v2.parseXML = function (xml) {
          this.__data_obj.graphs.tempgraph = new Array();
          var v3 = (new com.amcharts.XML2Object()).parseXML(xml);
          if (typeof v3.chart.graphs.graph == 'object' && v3.chart.graphs.graph.length == undefined) {
            var v8 = v3.chart.graphs.graph;
            v3.chart.graphs.graph = new Array();
            v3.chart.graphs.graph.push(v8);
          }
          var v7 = 0;
          while (v7 < v3.chart.graphs.graph.length) {
            this.__data_obj.graphs.tempgraph[v7] = new Object();
            this.__data_obj.graphs.tempgraph[v7].value = new Array();
            this.__data_obj.graphs.graph[v7] = new Object();
            this.__data_obj.graphs.graph[v7].value = new Array();
            var v5 = v3.chart.graphs.graph[v7];
            var v6 = v5.attributes.gid;
            this.__data_obj.graphs.graph[v7].axis = v5.attributes.axis || this.__settings[v6].axis || 'left';
            this.__data_obj.graphs.graph[v7].title = v5.attributes.title || this.__settings[v6].title || '';
            this.__data_obj.graphs.graph[v7].unit = v5.attributes.unit || this.__settings[v6].unit || '';
            this.__data_obj.graphs.graph[v7].unit_position = v5.attributes.unit_position || this.__settings[v6].unit_position || 'right';
            this.__data_obj.graphs.graph[v7].color = v5.attributes.color || this.__settings[v6].color || this.__graphColors[v7];
            this.__data_obj.graphs.graph[v7].color = '0x' + this.__data_obj.graphs.graph[v7].color.substr(-6);
            this.__data_obj.graphs.graph[v7].colorHover = v5.attributes.color_hover || this.__settings[v6].color_hover || 'BBBB00';
            this.__data_obj.graphs.graph[v7].colorHover = '0x' + this.__data_obj.graphs.graph[v7].colorHover.substr(-6);
            this.__data_obj.graphs.graph[v7].lineAlpha = Number(v5.attributes.line_alpha || this.__settings[v6].line_alpha || 100);
            this.__data_obj.graphs.graph[v7].lineWidth = Number(v5.attributes.line_width || this.__settings[v6].line_width || 0);
            this.__data_obj.graphs.graph[v7].fillAlpha = Number(v5.attributes.fill_alpha || this.__settings[v6].fill_alpha || 0);
            this.__data_obj.graphs.graph[v7].balloonColor = v5.attributes.balloon_color || this.__settings[v6].balloon_color || this.__data_obj.graphs.graph[v7].color;
            this.__data_obj.graphs.graph[v7].balloonColor = '0x' + this.__data_obj.graphs.graph[v7].balloonColor.substr(-6);
            this.__data_obj.graphs.graph[v7].balloonTextColor = v5.attributes.balloon_text_color || this.__settings[v6].balloon_text_color || 'FFFFFF';
            this.__data_obj.graphs.graph[v7].balloonTextColor = '0x' + this.__data_obj.graphs.graph[v7].balloonTextColor.substr(-6);
            this.__data_obj.graphs.graph[v7].bullet = v5.attributes.bullet || this.__settings[v6].bullet || 'none';
            this.__data_obj.graphs.graph[v7].bulletSize = Number(v5.attributes.bullet_size || this.__settings[v6].bullet_size || 8);
            this.__data_obj.graphs.graph[v7].bulletColor = v5.attributes.bullet_color || this.__settings[v6].bullet_color || this.__data_obj.graphs.graph[v7].color;
            this.__data_obj.graphs.graph[v7].bulletColor = '0x' + this.__data_obj.graphs.graph[v7].bulletColor.substr(-6);
            this.__data_obj.graphs.graph[v7].hidden = com.amcharts.Utils.parseTrue(v5.attributes.hidden || this.__settings[v6].hidden || false);
            this.__data_obj.graphs.graph[v7].selected = com.amcharts.Utils.parseTrue(v5.attributes.selected || this.__settings[v6].selected || true);
            this.__data_obj.graphs.graph[v7].color = Number(this.__data_obj.graphs.graph[v7].color);
            this.__data_obj.graphs.graph[v7].colorHover = Number(this.__data_obj.graphs.graph[v7].colorHover);
            this.__data_obj.graphs.graph[v7].balloonColor = Number(this.__data_obj.graphs.graph[v7].balloonColor);
            this.__data_obj.graphs.graph[v7].balloonTextColor = Number(this.__data_obj.graphs.graph[v7].balloonTextColor);
            this.__data_obj.graphs.graph[v7].bulletColor = Number(this.__data_obj.graphs.graph[v7].bulletColor);
            if (this.__data_obj.graphs.graph[v7].axis == 'right') {
              ++this.__data_obj.graphs.rightcount;
            } else {
              ++this.__data_obj.graphs.leftcount;
            }
            ++v7;
          }
          v7 = 0;
          while (v7 < v3.chart.xaxis.value.length) {
            this.__data_obj.xaxis.value[v7] = new Object();
            var v4 = 'id_' + v3.chart.xaxis.value[v7].attributes.xid;
            this.__data_obj.xaxis.value[v7].id = v4;
            this.__data_obj.xaxis.value[v7].value = v3.chart.xaxis.value[v7].data;
            var v2 = 0;
            while (v2 < v3.chart.graphs.graph.length) {
              this.__data_obj.graphs.tempgraph[v2].value[v4] = null;
              ++v2;
            }
            ++v7;
          }
          v2 = 0;
          while (v2 < v3.chart.graphs.graph.length) {
            v7 = 0;
            while (v7 < v3.chart.graphs.graph[v2].value.length) {
              v4 = 'id_' + v3.chart.graphs.graph[v2].value[v7].attributes.xid;
              this.__data_obj.graphs.tempgraph[v2].value[v4] = new Object();
              this.__data_obj.graphs.tempgraph[v2].value[v4].value = Number(com.amcharts.Utils.stripSymbols(v3.chart.graphs.graph[v2].value[v7].data, ' '));
              this.__data_obj.graphs.tempgraph[v2].value[v4].description = v3.chart.graphs.graph[v2].value[v7].attributes.description;
              this.__data_obj.graphs.tempgraph[v2].value[v4].bullet = v3.chart.graphs.graph[v2].value[v7].attributes.bullet;
              this.__data_obj.graphs.tempgraph[v2].value[v4].bulletSize = Number(v3.chart.graphs.graph[v2].value[v7].attributes.bullet_size);
              this.__data_obj.graphs.tempgraph[v2].value[v4].bulletColor = Number('0x' + v3.chart.graphs.graph[v2].value[v7].attributes.bullet_color.substr(-6));
              this.__data_obj.graphs.tempgraph[v2].value[v4].url = v3.chart.graphs.graph[v2].value[v7].attributes.url;
              ++v7;
            }
            v7 = 0;
            while (v7 < this.__data_obj.xaxis.value.length) {
              this.__data_obj.graphs.graph[v2].value[v7] = this.__data_obj.graphs.tempgraph[v2].value[this.__data_obj.xaxis.value[v7].id];
              if (this.__data_obj.graphs.graph[v2].value[v7].value == undefined || isNaN(this.__data_obj.graphs.graph[v2].value[v7].value) == true) {
                this.__data_obj.graphs.graph[v2].value[v7] = null;
              }
              ++v7;
            }
            delete this.__data_obj.graphs.tempgraphs[v2];
            ++v2;
          }
          return this.__data_obj;
        };

        v2.__graphColors = ['FF0000', '0000FF', '00FF00', 'FF9900', 'CC00CC', '00CCCC', '33FF00', '990000', '000066'];
        ASSetPropFlags(com.amcharts.ParseData.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 39 __Packages.com.amcharts.Arrays {

    #initclip
      if (!_global.com) {
        _global.com = new Object();
      }
      if (!_global.com.amcharts) {
        _global.com.amcharts = new Object();
      }
      if (!_global.com.amcharts.Arrays) {
        var v1 = function () {};

        com.amcharts.Arrays = v1;
        var v2 = v1.prototype;
        v1.isInArray = function (array, value) {
          var v1 = 0;
          while (v1 < array.length) {
            if (value == array[v1]) {
              return true;
            }
            ++v1;
          }
          return false;
        };

        v1.deleteEqualTo = function (array, symbol) {
          var v1 = 0;
          while (v1 < array.length) {
            if (array[v1] == symbol) {
              array.splice(v1, 1);
              com.amcharts.Arrays.deleteEqualTo(array, symbol);
              break;
            }
            ++v1;
          }
          return array;
        };

        ASSetPropFlags(com.amcharts.Arrays.prototype, null, 1);
      }
    #endinitclip
  }

  frame 2 {
    function getSize(width, height) {
      stageWidth = width;
      stageHeight = height;
      play();
    }

    function checkKey(serial) {
      serial = com.amcharts.Utils.stripSymbols(serial, ' ');
      serial = com.amcharts.Utils.stripSymbols(serial, '\n');
      serial = com.amcharts.Utils.stripSymbols(serial, '\r');
      serial = com.amcharts.Utils.stripSymbols(serial, '\r\n');
      arr = serial.split('-');
      if (Number(arr[2]) + Number(arr[3]) != 8645 || Number(arr[2].substr(1, 1)) - Number(arr[3].substr(2, 1)) != 2) {
        attachMovie('copyright_mc', 'copyright_mc', 1001);
      }
    }

    _global.replaceTxt = function (inputTxt, toFind, toReplace) {
      return (inputTxt.split(toFind)).join(toReplace);
    };

    Stage.align = 'TL';
    Stage.scaleMode = 'noScale';
    var chartData = amline_chartData || chart_data;
    amline_path = amline_path || path || '';
    amline_flashHeight = amline_flashHeight || flash_height;
    amline_flashWidth = amline_flashWidth || flash_width;
    amline_settingsFile = amline_settingsFile || settings_file;
    amline_dataFile = amline_dataFile || data_file;
    amline_preloaderColor = amline_preloaderColor || preloader_color;
    loading_data = loading_data || 'Loading data';
    loading_settings = loading_settings || 'Loading settings';
    amline_path = replaceTxt(amline_path, 'javascript', '');
    amline_settingsFile = replaceTxt(amline_settingsFile, 'javascript', '');
    amline_dataFile = replaceTxt(amline_dataFile, 'javascript', '');
    stop();
    new com.amcharts.StageSize(this, 'getSize');
    var free = true;
    var keyLoader = new com.amcharts.Load();
    keyLoader.loadVars(amline_path + 'amcharts_key.txt', this, 'checkKey', false, 'checkKey');
  }

  frame 3 {
    function parseSettings(xml) {
      amlineSettings = (new com.amcharts.XML2Object()).parseXML(xml);
      amlineSettings = amlineSettings.settings;
      play();
    }

    function error(fileName) {
      new com.amcharts.PopUp(this, 'popup', 100, 'Error loading file: ' + fileName, (preloaderWidth - preloaderWidth * 0.8) / 2, preloaderHeight / 2.5, preloaderWidth * 0.8, 12303104, 16777215);
    }

    if (amline_flashWidth.substr(-1) == '%' || amline_flashWidth == undefined) {
      preloaderWidth = stageWidth;
    } else {
      preloaderWidth = Number(amline_flashWidth);
    }
    if (preloaderWidth == undefined || isNaN(preloaderWidth) == true) {
      preloaderWidth = 520;
    }
    if (amline_flashHeight.substr(-1) == '%' || amline_flashHeight == undefined) {
      preloaderHeight = stageHeight;
    } else {
      preloaderHeight = Number(amline_flashHeight);
    }
    if (preloaderHeight == undefined || isNaN(preloaderHeight) == true) {
      preloaderHeight = 400;
    }
    if (amline_backgroundColor != undefined) {
      amline_backgroundColor = Number('0x' + amline_backgroundColor.substr(-6));
    }
    if (amline_preloaderColor == undefined) {
      amline_preloaderColor = 0;
    } else {
      amline_preloaderColor = Number('0x' + amline_preloaderColor.substr(-6));
    }
    settingsFileName = amline_settingsFile;
    dataFileName = amline_dataFile || 'amline_data.xml';
    if (settingsFileName != '' && settingsFileName != undefined) {
      var settings_xml;
      var loader = new com.amcharts.Load();
      removeMovieClip(this.popup);
      loader.loadXML(settingsFileName, this, 'parseSettings', false, 'error');
      loader.preloader(this, 'preloader_mc0', 10, 0, 0, preloaderWidth, preloaderHeight, amline_preloaderColor, amline_backgroundColor, loading_settings);
      stop();
    }
    var amlineSettings;
  }

  frame 4 {
    function loadData() {
      if (chartData == undefined) {
        if (amlineSettings.data_file_name.data != undefined) {
          dataFileName = amlineSettings.data_file_name.data;
        }
        if (com.amcharts.Utils.parseTrue(amlineSettings.add_time_stamp.data) == true) {
          if (dataFileName.indexOf('?') == -1) {
            var v3 = '?';
          } else {
            var v3 = '&';
          }
          newDataFileName = dataFileName + v3 + random(Number.MAX_VALUE) + '' + random(Number.MAX_VALUE);
        } else {
          newDataFileName = dataFileName;
        }
        removeMovieClip(this.popup);
        if (amlineSettings.data_type.data.toLowerCase() == 'csv') {
          var v2 = new com.amcharts.Load();
          v2.loadVars(newDataFileName, this, 'getData', false, 'error');
          if (chartCreated != true) {
            v2.preloader(this, 'preloader_mc', 10, 0, 0, preloaderWidth, preloaderHeight, amline_preloaderColor, amline_, loading_data);
          }
        } else {
          var v4;
          var v2 = new com.amcharts.Load();
          v2.loadXML(newDataFileName, this, 'getData', false, 'error');
          if (chartCreated != true) {
            v2.preloader(this, 'preloader_mc', 10, 0, 0, preloaderWidth, preloaderHeight, amline_preloaderColor, amline_, loading_data);
          }
        }
      } else {
        getData(chartData);
      }
    }

    function getData(data) {
      lineChartData = data;
      if (chartCreated != true) {
        buildChart();
        chartCreated = true;
      }
      updateData();
    }

    function updateData() {
      lineChart.dataProvider = lineChartData;
    }

    function buildChart() {
      _global.amchartsConfig = new Object();
      _global.amchartsConfig.font = amlineSettings.font.data || 'Arial';
      _global.amchartsConfig.textSize = Number(amlineSettings.text_size.data) || 11;
      _global.amchartsConfig.textColor = Number('0x' + amlineSettings.text_color.data.substr(-6)) || 0;
      _global.amchartsConfig.thousandsSeparator = amlineSettings.thousands_separator.data;
      _global.amchartsConfig.decimalsSeparator = amlineSettings.decimals_separator.data;
      if (amlineSettings.background.file.data != undefined) {
        var v8 = this.createEmptyMovieClip('bg_mc', 0);
        loadMovie(amline_path + amlineSettings.background.file.data, v8);
      }
      lineChart.swapDepths(100);
      lineChart.width = Number(amlineSettings.width.data) || preloaderWidth;
      lineChart.height = Number(amlineSettings.height.data) || preloaderHeight;
      lineChart.path = amline_path;
      lineChart.dataType = amlineSettings.data_type.data.toLowerCase();
      lineChart.csvSeparator = amlineSettings.csv_separator.data;
      lineChart.connect = com.amcharts.Utils.parseTrue(amlineSettings.connect.data);
      lineChart.hideBulletsCount = Number(amlineSettings.hide_bullets_count.data);
      lineChart.redraw = com.amcharts.Utils.parseTrue(amlineSettings.redraw.data);
      lineChart.plotAreaColor = Number('0x' + amlineSettings.plot_area.color.data.substr(-6));
      lineChart.plotAreaAlpha = Number(amlineSettings.plot_area.alpha.data);
      lineChart.bgColor = Number('0x' + amlineSettings.background.color.data.substr(-6));
      lineChart.bgAlpha = Number(amlineSettings.background.alpha.data);
      lineChart.borderColor = Number('0x' + amlineSettings.background.border_color.data.substr(-6));
      lineChart.borderAlpha = Number(amlineSettings.background.border_alpha.data);
      lineChart.leftMargin = Number(amlineSettings.plot_area.margins.left.data);
      lineChart.topMargin = Number(amlineSettings.plot_area.margins.top.data);
      lineChart.rightMargin = Number(amlineSettings.plot_area.margins.right.data);
      lineChart.bottomMargin = Number(amlineSettings.plot_area.margins.bottom.data);
      lineChart.gridXApproxCount = Number(amlineSettings.grid.x.approx_count.data);
      lineChart.gridXDashed = com.amcharts.Utils.parseTrue(amlineSettings.grid.x.dashed.data);
      lineChart.gridXDashLength = Number(amlineSettings.grid.x.dash_length.data);
      lineChart.gridXAlpha = Number(amlineSettings.grid.x.alpha.data);
      lineChart.gridXColor = Number('0x' + amlineSettings.grid.x.color.data.substr(-6));
      lineChart.gridLApproxCount = Number(amlineSettings.grid.y_left.approx_count.data);
      lineChart.gridLDashed = com.amcharts.Utils.parseTrue(amlineSettings.grid.y_left.dashed.data);
      lineChart.gridLDashLength = Number(amlineSettings.grid.y_left.dash_length.data);
      lineChart.gridLAlpha = Number(amlineSettings.grid.y_left.alpha.data);
      lineChart.gridLColor = Number('0x' + amlineSettings.grid.y_left.color.data.substr(-6));
      lineChart.gridRApproxCount = Number(amlineSettings.grid.y_right.approx_count.data);
      lineChart.gridRDashed = com.amcharts.Utils.parseTrue(amlineSettings.grid.y_right.dashed.data);
      lineChart.gridRDashLength = Number(amlineSettings.grid.y_right.dash_length.data);
      lineChart.gridRAlpha = Number(amlineSettings.grid.y_right.alpha.data);
      lineChart.gridRColor = Number('0x' + amlineSettings.grid.y_right.color.data.substr(-6));
      lineChart.valueXFreq = Number(amlineSettings.values.x.frequency.data);
      lineChart.valueLFreq = Number(amlineSettings.values.y_left.frequency.data);
      lineChart.valueRFreq = Number(amlineSettings.values.y_right.frequency.data);
      lineChart.valueXEnabled = com.amcharts.Utils.parseTrue(amlineSettings.values.x.enabled.data);
      lineChart.valueLEnabled = com.amcharts.Utils.parseTrue(amlineSettings.values.y_left.enabled.data);
      lineChart.valueREnabled = com.amcharts.Utils.parseTrue(amlineSettings.values.y_right.enabled.data);
      lineChart.valueXSkipFirst = com.amcharts.Utils.parseTrue(amlineSettings.values.x.skip_first.data);
      lineChart.valueXSkipLast = com.amcharts.Utils.parseTrue(amlineSettings.values.x.skip_last.data);
      lineChart.valueLSkipFirst = com.amcharts.Utils.parseTrue(amlineSettings.values.y_left.skip_first.data);
      lineChart.valueLSkipLast = com.amcharts.Utils.parseTrue(amlineSettings.values.y_left.skip_last.data);
      lineChart.valueRSkipFirst = com.amcharts.Utils.parseTrue(amlineSettings.values.y_right.skip_first.data);
      lineChart.valueRSkipLast = com.amcharts.Utils.parseTrue(amlineSettings.values.y_right.skip_last.data);
      lineChart.valueXColor = Number('0x' + amlineSettings.values.x.color.data.substr(-6));
      lineChart.valueLColor = Number('0x' + amlineSettings.values.y_left.color.data.substr(-6));
      lineChart.valueRColor = Number('0x' + amlineSettings.values.y_right.color.data.substr(-6));
      lineChart.valueXTextSize = Number(amlineSettings.values.x.text_size.data) || _global.amchartsConfig.textSize;
      lineChart.valueLTextSize = Number(amlineSettings.values.y_left.text_size.data);
      lineChart.valueRTextSize = Number(amlineSettings.values.y_right.text_size.data);
      lineChart.valueLUnit = amlineSettings.values.y_left.unit.data;
      lineChart.valueLUnitPosition = amlineSettings.values.y_left.unit_position.data.toLowerCase();
      lineChart.valueRUnit = amlineSettings.values.y_right.unit.data;
      lineChart.valueRUnitPosition = amlineSettings.values.y_right.unit_position.data.toLowerCase();
      lineChart.minLeft = Number(amlineSettings.values.y_left.min.data);
      lineChart.maxLeft = Number(amlineSettings.values.y_left.max.data);
      lineChart.minRight = Number(amlineSettings.values.y_right.min.data);
      lineChart.maxRight = Number(amlineSettings.values.y_right.max.data);
      lineChart.axisXAlpha = Number(amlineSettings.axes.x.alpha.data);
      lineChart.axisXColor = Number('0x' + amlineSettings.axes.x.color.data.substr(-6));
      lineChart.axisXWidth = Number(amlineSettings.axes.x.width.data);
      lineChart.axisXTickLength = Number(amlineSettings.axes.x.tick_length.data);
      lineChart.axisLAlpha = Number(amlineSettings.axes.y_left.alpha.data);
      lineChart.axisLColor = Number('0x' + amlineSettings.axes.y_left.color.data.substr(-6));
      lineChart.axisLWidth = Number(amlineSettings.axes.y_left.width.data);
      lineChart.axisLTickLength = Number(amlineSettings.axes.y_left.tick_length.data);
      lineChart.axisRAlpha = Number(amlineSettings.axes.y_right.alpha.data);
      lineChart.axisRColor = Number('0x' + amlineSettings.axes.y_right.color.data.substr(-6));
      lineChart.axisRWidth = Number(amlineSettings.axes.y_right.width.data);
      lineChart.axisRTickLength = Number(amlineSettings.axes.y_right.tick_length.data);
      lineChart.showIndicator = com.amcharts.Utils.parseTrue(amlineSettings.indicator.enabled.data);
      lineChart.zoomable = com.amcharts.Utils.parseTrue(amlineSettings.indicator.zoomable.data);
      lineChart.indicatorLineColor = Number('0x' + amlineSettings.indicator.color.data.substr(-6));
      lineChart.indicatorLineAlpha = Number(amlineSettings.indicator.line_alpha.data);
      lineChart.indicatorSelectionColor = Number('0x' + amlineSettings.indicator.selection_color.data.substr(-6));
      lineChart.indicatorSelectionAlpha = Number(amlineSettings.indicator.selection_alpha.data);
      lineChart.xBalloonTextColor = Number('0x' + amlineSettings.indicator.x_balloon_text_color.data.substr(-6));
      lineChart.xBalloonEnabled = com.amcharts.Utils.parseTrue(amlineSettings.indicator.x_balloon_enabled.data);
      lineChart.yBalloonOnOff = com.amcharts.Utils.parseTrue(amlineSettings.indicator.y_balloon_on_off.data);
      lineChart.showLegend = com.amcharts.Utils.parseTrue(amlineSettings.legend.enabled.data);
      lineChart.OnOff = com.amcharts.Utils.parseTrue(amlineSettings.legend.graph_on_off.data);
      lineChart.legendX = Number(amlineSettings.legend.x.data);
      lineChart.legendY = Number(amlineSettings.legend.y.data);
      lineChart.legendWidth = Number(amlineSettings.legend.width.data);
      lineChart.legendBgColor = Number('0x' + amlineSettings.legend.color.data.substr(-6));
      lineChart.legendBgAlpha = Number(amlineSettings.legend.alpha.data);
      lineChart.legendBorderColor = Number('0x' + amlineSettings.legend.border_color.data.substr(-6));
      lineChart.legendBorderAlpha = Number(amlineSettings.legend.border_alpha.data);
      lineChart.legendKeySize = Number(amlineSettings.legend.key.size.data);
      lineChart.legendKeyBorderColor = Number('0x' + amlineSettings.legend.key.border_color.data.substr(-6));
      lineChart.legendKeyMarkColor = Number('0x' + amlineSettings.legend.key.key_mark_color.data.substr(-6));
      lineChart.legendTextColor = Number('0x' + amlineSettings.legend.text_color.data.substr(-6));
      lineChart.legendTextColorHover = Number('0x' + amlineSettings.legend.text_color_hover.data.substr(-6));
      lineChart.legendTextSize = Number(amlineSettings.legend.text_size.data);
      lineChart.legendSpacing = Number(amlineSettings.legend.spacing.data);
      lineChart.legendMargins = Number(amlineSettings.legend.margins.data);
      lineChart.zoomX = Number(amlineSettings.zoom_out_button.x.data);
      lineChart.zoomY = Number(amlineSettings.zoom_out_button.y.data);
      lineChart.zoomBgColor = Number('0x' + amlineSettings.zoom_out_button.color.data.substr(-6));
      lineChart.zoomBgAlpha = Number(amlineSettings.zoom_out_button.alpha.data);
      lineChart.zoomTextColor = Number('0x' + amlineSettings.zoom_out_button.text_color.data.substr(-6));
      lineChart.zoomTextColorHover = Number('0x' + amlineSettings.zoom_out_button.text_color_hover.data.substr(-6));
      lineChart.zoomTextSize = Number(amlineSettings.zoom_out_button.text_size.data);
      lineChart.zoomText = amlineSettings.zoom_out_button.text.data;
      lineChart.helpButtonX = Number(amlineSettings.help.button.x.data);
      lineChart.helpButtonY = Number(amlineSettings.help.button.y.data);
      lineChart.helpButtonBgColor = Number('0x' + amlineSettings.help.button.color.data.substr(-6));
      lineChart.helpButtonBgAlpha = Number(amlineSettings.help.button.alpha.data);
      lineChart.helpButtonTextColor = Number('0x' + amlineSettings.help.button.text_color.data.substr(-6));
      lineChart.helpButtonTextColorHover = Number('0x' + amlineSettings.help.button.text_color_hover.data.substr(-6));
      lineChart.helpButtonTextSize = Number(amlineSettings.help.button.text_size.data);
      lineChart.helpButtonText = amlineSettings.help.button.text.data;
      lineChart.helpBalloonWidth = Number(amlineSettings.help.balloon.width.data);
      lineChart.helpBalloonBgColor = Number('0x' + amlineSettings.help.balloon.color.data.substr(-6));
      lineChart.helpBalloonBgAlpha = Number(amlineSettings.help.balloon.alpha.data);
      lineChart.helpBalloonTextColor = Number('0x' + amlineSettings.help.balloon.text_color.data.substr(-6));
      lineChart.helpBalloonTextSize = Number(amlineSettings.help.balloon.text_size.data);
      lineChart.helpBalloonText = amlineSettings.help.balloon.text.data;
      lineChart.noDataText = amlineSettings.strings.no_data.data;
      if (amlineSettings.labels.label.length == undefined) {
        var v7 = amlineSettings.labels.label;
        amlineSettings.labels.label = new Array();
        amlineSettings.labels.label.push(v7);
      }
      if (typeof amlineSettings.graphs.graph == 'object' && amlineSettings.graphs.graph.length == undefined) {
        v7 = amlineSettings.graphs.graph;
        amlineSettings.graphs.graph = new Array();
        amlineSettings.graphs.graph.push(v7);
      }
      var v5 = new Object();
      var v6 = 0;
      while (v6 < amlineSettings.graphs.graph.length) {
        var v4 = amlineSettings.graphs.graph[v6];
        if (amlineSettings.data_type.data.toLowerCase() != 'csv') {
          var v3 = v4.attributes.gid;
        } else {
          var v3 = v6;
        }
        v5[v3] = new Object();
        v5[v3].axis = v4.axis.data;
        v5[v3].title = v4.title.data;
        v5[v3].unit = v4.unit.data;
        v5[v3].unit_position = v4.unit_position.data;
        v5[v3].color = v4.color.data;
        v5[v3].color_hover = v4.color_hover.data;
        v5[v3].line_alpha = v4.line_alpha.data;
        v5[v3].line_width = v4.line_width.data;
        v5[v3].fill_alpha = v4.fill_alpha.data;
        v5[v3].balloon_color = v4.balloon_color.data;
        v5[v3].balloon_text_color = v4.balloon_text_color.data;
        v5[v3].bullet = v4.bullet.data;
        v5[v3].bullet_size = v4.bullet_size.data;
        v5[v3].bullet_color = v4.bullet_color.data;
        v5[v3].hidden = v4.hidden.data;
        v5[v3].selected = v4.selected.data;
        ++v6;
      }
      lineChart.graphSettings = v5;
      v6 = 0;
      while (v6 < amlineSettings.labels.label.length) {
        if (amlineSettings.labels.label[v6].text.data != undefined) {
          lineChart.addLabel(amlineSettings.labels.label[v6].text.data, amlineSettings.labels.label[v6].align.data, Number(amlineSettings.labels.label[v6].x.data), Number(amlineSettings.labels.label[v6].y.data), Number(amlineSettings.labels.label[v6].width.data), Number(amlineSettings.labels.label[v6].text_size.data), Number('0x' + amlineSettings.labels.label[v6].text_color.data.substr(-6)));
        }
        ++v6;
      }
      if (Number(amlineSettings.reload_data_interval.data) > 0) {
        interval = setInterval(this, 'loadData', Number(amlineSettings.reload_data_interval.data) * 1000);
      }
    }

    stop();
    loadData();
  }

  movieClip 8  {
  }

  movieClip 10  {
  }

  movieClip 11 LineChart {

    #initclip
      Object.registerClass('LineChart', com.amcharts.LineChart);
    #endinitclip
  }
}
